(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{380:function(t,a,e){"use strict";e.r(a);var s=e(42),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"react学习笔记"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react学习笔记"}},[t._v("#")]),t._v(" React学习笔记")]),t._v(" "),e("h2",{attrs:{id:"_1-介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-介绍"}},[t._v("#")]),t._v(" 1 介绍")]),t._v(" "),e("p",[t._v("React 是一个声明式，高效且灵活的用于构建用户界面的 JavaScript 库。使用 React 可以将一些简短、独立的代码片段组合成复杂的 UI 界面，这些代码片段被称作“组件”。")]),t._v(" "),e("p",[t._v("特点：")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("1.声明式设计")]),t._v(" −React采用声明范式，可以轻松描述应用。")]),t._v(" "),e("li",[e("strong",[t._v("2.高效")]),t._v(" −虚拟(virtual)DOM, 不总是直接操作DOM(批量更新, 减少更新的次数) 高效的DOM Diff算法, 最小化页面重绘(减小页面更新的区域)")]),t._v(" "),e("li",[e("strong",[t._v("3.灵活")]),t._v(" −React可以与已知的库或框架很好地配合。")]),t._v(" "),e("li",[e("strong",[t._v("4.JSX")]),t._v(" − JSX 是 JavaScript 语法的扩展。React 开发不一定使用 JSX ，但我们建议使用它。")]),t._v(" "),e("li",[e("strong",[t._v("5.组件")]),t._v(" − 通过 React 构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。")]),t._v(" "),e("li",[e("strong",[t._v("6.单向响应的数据流")]),t._v(" − React 实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单。")])]),t._v(" "),e("h2",{attrs:{id:"_2-基本例子"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-基本例子"}},[t._v("#")]),t._v(" 2 基本例子")]),t._v(" "),e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[e("span",{pre:!0,attrs:{class:"token doctype"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<!")]),e("span",{pre:!0,attrs:{class:"token doctype-tag"}},[t._v("DOCTYPE")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token name"}},[t._v("html")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("html")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("head")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("charset")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("UTF-8"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n    \n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("src")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("../build/react.development.js"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token script"}}),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("src")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("../build/react-dom.development.js"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token script"}}),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("src")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("../build/babel.min.js"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token script"}}),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("head")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("body")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("example"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("type")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("text/babel"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token script"}},[e("span",{pre:!0,attrs:{class:"token language-javascript"}},[t._v("\n      ReactDOM"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n         "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//html模版")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("h1"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("Hello"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" world"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("h1"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        document"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'example'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    ")])]),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("body")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("html")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),e("p",[t._v("上面代码有两个地方需要注意。首先，最后一个 "),e("code",[t._v("<script>")]),t._v(" 标签的 "),e("code",[t._v("type")]),t._v(" 属性为 "),e("code",[t._v("text/babel")]),t._v("。这是因为 React 独有的 JSX 语法，跟 JavaScript 不兼容。凡是使用 JSX 的地方，都要加上 "),e("code",[t._v('type="text/babel"')])]),t._v(" "),e("p",[e("code",[t._v("react.js")]),t._v(" 是 React 的核心库，"),e("code",[t._v("react-dom.js")]),t._v(" 是提供与 DOM 相关的功能，"),e("code",[t._v("bable.js")]),t._v(" 的作用是将 JSX 语法转Babel 可以将 ES6 代码转为 ES5 代码，这样我们就能在目前不支持 ES6 浏览器上执行 React 代码JavaScript 语法，这一步很消耗时间，实际上线的时候，应该将它放到服务器完成。同时Babel 可以将 ES6 代码转为 ES5 代码，这样我们就能在目前不支持 ES6 浏览器上执行 React 代码。")]),t._v(" "),e("h2",{attrs:{id:"_3-jsx语法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-jsx语法"}},[t._v("#")]),t._v(" 3 jsx语法")]),t._v(" "),e("h3",{attrs:{id:"_3-1-基本概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-基本概念"}},[t._v("#")]),t._v(" 3.1 基本概念")]),t._v(" "),e("p",[t._v("规则：")]),t._v(" "),e("ol",[e("li",[t._v("在 JSX 中不能使用 if else 语句，但可以使用 conditional (三元运算) 表达式来替代")]),t._v(" "),e("li",[t._v("camelCase 语法来设置内联样式. React 会在指定元素数字后自动添加 px 。")]),t._v(" "),e("li",[t._v("注释需要写在花括号中")]),t._v(" "),e("li",[t._v("JSX 允许直接在模板插入 JavaScript 变量。如果这个变量是一个数组，则会展开这个数组的所有成员")]),t._v(" "),e("li",[t._v("遇到 HTML 标签（以 "),e("code",[t._v("<")]),t._v(" 开头），就用 HTML 规则解析；遇到代码块（以 "),e("code",[t._v("{")]),t._v(" 开头），就用 JavaScript 规则解析")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var names = ['Alice', 'Emily', 'Kate'];\n\nReactDOM.render(\n  <div>\n  {\n    names.map(function (name) {\n      return <div>Hello, {name}!</div>\n    })\n  }\n  </div>,\n  document.getElementById('example')\n);\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[t._v("插入变量到javascript")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var arr = [\n  <h1>Hello world!</h1>,\n  <h2>React is awesome</h2>,\n];\nReactDOM.render(\n  <div>{arr}</div>,\n  document.getElementById('example')\n);\n")])])]),e("h3",{attrs:{id:"_3-2-jsx原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-jsx原理"}},[t._v("#")]),t._v(" 3.2 jsx原理")]),t._v(" "),e("p",[t._v("本质上来讲，JSX 只是为 "),e("code",[t._v("React.createElement(component, props, ...children)")]),t._v(" 方法提供的语法糖。比如下面的代码：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<MyButton color="blue" shadowSize={2}>\n  Click Me\n</MyButton>\n')])])]),e("p",[t._v("编译为：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("React.createElement(\n  MyButton,\n  {color: 'blue', shadowSize: 2},\n  'Click Me'\n)\n")])])]),e("p",[t._v("如果没有子代，你还可以使用自闭合标签，比如：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<div className="sidebar" />\n')])])]),e("p",[t._v("编译为：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("React.createElement(\n  'div',\n  {className: 'sidebar'},\n  null\n)\n")])])]),e("h3",{attrs:{id:"_3-3-jsx语法特点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-jsx语法特点"}},[t._v("#")]),t._v(" 3.3 jsx"),e("strong",[t._v("语法特点")])]),t._v(" "),e("ul",[e("li",[t._v("JSX 执行更快，因为它在编译为 JavaScript 代码后进行了优化。")]),t._v(" "),e("li",[t._v("它是类型安全的，在编译过程中就能发现错误。")]),t._v(" "),e("li",[t._v("使用 JSX 编写模板更加简单快速。")]),t._v(" "),e("li",[t._v("jSX 防注入攻击中,React DOM 在渲染之前默认会 过滤所有传入的值。它可以确保你的应用不会被注入攻击。所有的内容在渲染之前都被转换成了字符串。这样可以有效地防止 XSS(跨站脚本) 攻击")])]),t._v(" "),e("h2",{attrs:{id:"_4-元素渲染"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-元素渲染"}},[t._v("#")]),t._v(" 4 元素渲染")]),t._v(" "),e("p",[t._v("元素是构成 "),e("strong",[t._v("React 应用的最小单位")]),t._v("，它用于描述屏幕上输出的内容")]),t._v(" "),e("p",[t._v("React 元素是"),e("strong",[t._v("不可变对象")]),t._v("。一旦被创建，你就无法更改它的子元素或者属性。")]),t._v(" "),e("p",[t._v("根据我们已有的知识，**更新 UI 唯一的方式是创建一个全新的元素，并将其传入 "),e("code",[t._v("ReactDOM.render()**")]),t._v("。React DOM 会将元素和它的子元素与它们之前的状态进行比较，并只会进行必要的更新来使 DOM 达到预期的状态。虚拟dom中的diff算法")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const element = <h1>Hello, world</h1>;\nReactDOM.render(element, document.getElementById('root'));\n")])])]),e("p",[t._v("ReactDOM.render 是 React 的最基本方法，用于将模板转为 HTML 语言，并插入指定的 DOM 节点。")]),t._v(" "),e("p",[t._v("接收两个参数：ReactDOM.render(虚拟dom对象，container)")]),t._v(" "),e("h2",{attrs:{id:"_5-组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-组件"}},[t._v("#")]),t._v(" 5 组件")]),t._v(" "),e("p",[t._v("组件的定义方式：函数组件，类组件")]),t._v(" "),e("h3",{attrs:{id:"_5-1-函数组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-函数组件"}},[t._v("#")]),t._v(" 5.1 函数组件")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n")])])]),e("p",[t._v("该函数是一个有效的 React 组件，因为它接收唯一带有数据的 “props”（代表属性）对象与并返回一个 React 元素。这类组件被称为“函数组件”，因为它本质上就是 JavaScript 函数。")]),t._v(" "),e("p",[t._v("一个函数就是一个组件，return一份DOM解构 特点：")]),t._v(" "),e("p",[t._v("1.没有生命周期，也会被更新并挂载，但是没有生命周期函数")]),t._v(" "),e("p",[t._v("2.没有this(组件实例）")]),t._v(" "),e("p",[t._v("3.没有内部状态（state）")]),t._v(" "),e("p",[t._v("优点 ：轻量，如果你的组件没有涉及到内部状态，只是用来渲染数据，那么就用函数式组件，性能较好。")]),t._v(" "),e("h3",{attrs:{id:"_5-2-class组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-class组件"}},[t._v("#")]),t._v(" 5.2 class组件")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//es6语法\nclass Welcome extends React.Component {\n  render() {\n    return <h1>Hello, {this.props.name}</h1>;\n  }\n}\n")])])]),e("h3",{attrs:{id:"_5-3-函数组件和类组件的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-函数组件和类组件的区别"}},[t._v("#")]),t._v(" 5.3 函数组件和类组件的区别")]),t._v(" "),e("p",[t._v("函数组件没有state，无法使用组件的生命周期方法，接受props，渲染dom，不关注逻辑，是一个无状态组件")]),t._v(" "),e("p",[t._v("函数组件和类组件当然是有区别的，而且函数组件的性能比类组件的性能要高，因为类组件使用的时候要实例化，而函数组件直接执行函数取返回结果即可。为了提高性能，尽量使用函数组件。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("区别")]),t._v(" "),e("th",[t._v("函数组件")]),t._v(" "),e("th",[t._v("类组件")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("是否有 "),e("code",[t._v("this")])]),t._v(" "),e("td",[t._v("没有")]),t._v(" "),e("td",[t._v("有")])]),t._v(" "),e("tr",[e("td",[t._v("是否有生命周期")]),t._v(" "),e("td",[t._v("没有")]),t._v(" "),e("td",[t._v("有")])]),t._v(" "),e("tr",[e("td",[t._v("是否有状态 "),e("code",[t._v("state")])]),t._v(" "),e("td",[t._v("没有")]),t._v(" "),e("td",[t._v("有")])])])]),t._v(" "),e("h3",{attrs:{id:"_5-4-组件渲染"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-组件渲染"}},[t._v("#")]),t._v(" 5.4 组件渲染")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('const element = <Welcome name="Sara" />;\nfunction Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\nconst element = <Welcome name="Sara" />;\nReactDOM.render(\n  element,\n  document.getElementById(\'root\')\n);\n')])])]),e("p",[t._v("渲染过程：")]),t._v(" "),e("ol",[e("li",[t._v("我们调用 "),e("code",[t._v("ReactDOM.render()")]),t._v(" 函数，并传入 "),e("code",[t._v('<Welcome name="Sara" />')]),t._v(" 作为参数。")]),t._v(" "),e("li",[t._v("React 调用 "),e("code",[t._v("Welcome")]),t._v(" 组件，并将 "),e("code",[t._v("{name: 'Sara'}")]),t._v(" 作为 props 传入。")]),t._v(" "),e("li",[e("code",[t._v("Welcome")]),t._v(" 组件将 "),e("code",[t._v("<h1>Hello, Sara</h1>")]),t._v(" 元素作为返回值。")]),t._v(" "),e("li",[t._v("React DOM 将 DOM 高效地更新为 "),e("code",[t._v("<h1>Hello, Sara</h1>")]),t._v("。")])]),t._v(" "),e("p",[t._v("注意："),e("strong",[t._v("组件名称必须以大写字母开头")]),t._v(" "),e("strong",[t._v("React 会将以小写字母开头的组件视为原生 DOM 标签")])]),t._v(" "),e("h3",{attrs:{id:"_5-5-props"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-props"}},[t._v("#")]),t._v(" 5.5 props")]),t._v(" "),e("p",[t._v("组件无论是使用函数声明还是通过 class 声明，都决不能修改自身的 props")]),t._v(" "),e("p",[t._v("如果我们需要向组件传递参数，可以使用 "),e("strong",[t._v("this.props")]),t._v(" 对象,实例如下")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function HelloMessage(props) {\n    return <h1>Hello {props.name}!</h1>;\n}\n \nconst element = <HelloMessage name=\"Runoob\"/>;\n \nReactDOM.render(\n    element,\n    document.getElementById('example')\n);\n")])])]),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//可以通过组件类的 defaultProps 属性为 props 设置默认值\nfunction HelloMessage(props) {\n    return <h1>Hello {props.name}!</h1>;\n}\n \nconst element = <HelloMessage name=\"Runoob\"/>;\n \nReactDOM.render(\n    element,\n    document.getElementById('example')\n);\n")])])]),e("p",[t._v("Props"),e("strong",[t._v("验证")])]),t._v(" "),e("p",[t._v("Props 验证使用 "),e("strong",[t._v("propTypes")]),t._v("，它可以保证我们的应用组件被正确使用，React.PropTypes 提供很多验证器 (validator) 来验证传入数据是否有效。当向 props 传入无效数据时，JavaScript 控制台会抛出警告")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var title = \"菜鸟教程\";\n// var title = 123;\nclass MyTitle extends React.Component {\n  render() {\n    return (\n      <h1>Hello, {this.props.title}</h1>\n    );\n  }\n}\n \nMyTitle.propTypes = {\n  title: PropTypes.string\n};\nReactDOM.render(\n    <MyTitle title={title} />,\n    document.getElementById('example')\n);\n")])])]),e("h3",{attrs:{id:"_5-6-复合组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-6-复合组件"}},[t._v("#")]),t._v(" 5.6 复合组件")]),t._v(" "),e("p",[t._v("我们可以通过创建多个组件来合成一个组件，即把组件的不同功能点进行分离。")]),t._v(" "),e("p",[t._v("以下实例我们实现了输出网站名字和网址的组件")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('function Name(props) {\n    return <h1>网站名称：{props.name}</h1>;\n}\nfunction Url(props) {\n    return <h1>网站地址：{props.url}</h1>;\n}\nfunction Nickname(props) {\n    return <h1>网站小名：{props.nickname}</h1>;\n}\nfunction App() {\n    return (\n    <div>\n        <Name name="菜鸟教程" />\n        <Url url="http://www.runoob.com" />\n        <Nickname nickname="Runoob" />\n    </div>\n    );\n}\n \nReactDOM.render(\n     <App />,\n    document.getElementById(\'example\')\n);\n')])])]),e("h2",{attrs:{id:"_6-state"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-state"}},[t._v("#")]),t._v(" 6 state")]),t._v(" "),e("p",[t._v("React 把组件看成是一个状态机（State Machines）。通过与用户的交互，实现不同状态，然后渲染 UI，让用户界面和数据保持一致。React 里，只需更新组件的 state，然后根据新的 state 重新渲染用户界面（不要操作 DOM）。state应该就是一个存储数据的地方，改变这个state中的数据，就会改变UI视图")]),t._v(" "),e("p",[e("strong",[t._v("特点：")])]),t._v(" "),e("ol",[e("li",[t._v("不能直接修改state，要采用setState来更新")]),t._v(" "),e("li",[t._v("状态更新可能是异步的，React 可以将多个"),e("code",[t._v("setState()")]),t._v(" 调用合并成一个调用来提高性能。")])]),t._v(" "),e("p",[t._v("react中不能直接改变state的值，要通过setState属性进行修改。")]),t._v(" "),e("p",[t._v("使用state，需要进行深拷贝或者浅拷贝")]),t._v(" "),e("h3",{attrs:{id:"_6-1-state数据改变"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-state数据改变"}},[t._v("#")]),t._v(" 6.1 state数据改变")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("浅拷贝")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("Object.assign()")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleChange")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      form"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Object"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("form"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" value "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),e("li",[e("p",[t._v("slice()")])]),t._v(" "),e("li",[e("p",[t._v("扩展运算符")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var player = {score: 1, name: 'Jeff'};\nvar newPlayer = Object.assign({}, player, {score: 2});\n// player 的值没有改变, 但是 newPlayer 的值是 {score: 2, name: 'Jeff'}\n\n// 使用对象展开语法，就可以写成：\n// var newPlayer = {...player, score: 2}\nconst squares = this.state.squares.slice()\n")])])])]),t._v(" "),e("li",[e("p",[t._v("深拷贝")]),t._v(" "),e("p",[t._v("JSON.parse(JSON.stringify(object))")])])]),t._v(" "),e("h3",{attrs:{id:"_6-2-setstate"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-setstate"}},[t._v("#")]),t._v(" 6.2 setState")]),t._v(" "),e("p",[t._v("特点：")]),t._v(" "),e("ol",[e("li",[t._v("setState是异步的，不会立即改变state的值。")]),t._v(" "),e("li",[t._v("多次setState调用生成的效果会合并。")]),t._v(" "),e("li",[t._v("第二个参数可以是一个回调函数。")]),t._v(" "),e("li",[t._v("setState可以接受一个函数（例子改动）")])]),t._v(" "),e("p",[t._v("异步的原因：")]),t._v(" "),e("ol",[e("li",[t._v("保证内部的一致性：首先，我想我们都同意推迟并批量处理重渲染是有益而且对性能优化很重要的，无论 setState() 是同步的还是异步的。那么就算让 state 同步更新，props 也不行，因为当父组件重渲染（re-render ）了你才知道 props。")]),t._v(" "),e("li",[t._v("在批量多次的更新中，延缓到最后合并渲染是有好处的。这一点，和我们熟知的防抖动函数的出发点类似，我们普遍认为在许多情况下在同一时间段，频繁setState触发渲染，连续同步效率很低，对性能有极大损耗。")])]),t._v(" "),e("p",[t._v("setState引发组件的更新过程：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://segmentfault.com/img/bVbdGk3?w=244&h=540",alt:"setStateå¼åç»ä»¶çæ´æ°è¿ç¨"}})]),t._v(" "),e("p",[t._v("每一次setState如果都引发一次组件更新，走完一圈生命周期，实在是有点粗糙和浪费，生命周期函数为纯函数性能应当还能够接受，可是render函数内返回的虚拟DOM去做比较这个就比较费时间了。")]),t._v(" "),e("p",[t._v("直观的感受是，React将多个setState产生的修改放在一个队列里，缓一缓，攒在一起，等待时机，觉得差不多了再引发一次更新过程。这样，在每次更新过程中，会把积攒的setState结果合并，做一个merge的动作，节省render触发的频率。\n这样，对于开发者而言，可以在同步代码中随意多行调用setState函数而不用担心重复setState重复render的问题")]),t._v(" "),e("h2",{attrs:{id:"_7-事件处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-事件处理"}},[t._v("#")]),t._v(" 7 事件处理")]),t._v(" "),e("p",[t._v("类组件中绑定的回调函数的this指向默认为undefined，类的方法不会绑定this，需要人为绑定this")]),t._v(" "),e("p",[t._v("现在常用的语法是")]),t._v(" "),e("h3",{attrs:{id:"_7-1-属性初始化器语法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-属性初始化器语法"}},[t._v("#")]),t._v(" 7.1 属性初始化器语法")]),t._v(" "),e("p",[t._v("就是在组件中使用箭头函数")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class LoggingButton extends React.Component {\n  // This syntax ensures `this` is bound within handleClick.\n  // Warning: this is *experimental* syntax.\n  handleClick = () => {\n    console.log('this is:', this);\n  }\n\n  render() {\n    return (\n      <button onClick={this.handleClick}>\n        Click me\n      </button>\n    );\n  }\n}\n")])])]),e("h3",{attrs:{id:"_7-2-回调函数使用箭头函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-回调函数使用箭头函数"}},[t._v("#")]),t._v(" 7.2 回调函数使用箭头函数")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class LoggingButton extends React.Component {\n  handleClick() {\n    console.log('this is:', this);\n  }\n\n  render() {\n    // This syntax ensures `this` is bound within handleClick\n    return (\n      <button onClick={(e) => this.handleClick(e)}>\n        Click me\n      </button>\n    );\n  }\n}\n")])])]),e("p",[t._v("使用这个语法有个问题就是每次 "),e("code",[t._v("LoggingButton")]),t._v(" 渲染的时候都会创建一个不同的回调函数。在大多数情况下，这没有问题。然而如果这个回调函数作为一个属性值传入低阶组件，这些组件可能会进行额外的重新渲染。我们通常建议在构造函数中绑定或使用属性初始化器语法来避免这类性能问题。")]),t._v(" "),e("h3",{attrs:{id:"_7-3-绑定事件传递参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-绑定事件传递参数"}},[t._v("#")]),t._v(" 7.3 绑定事件传递参数")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<button onClick={(e) => this.deleteRow(id, e)}>Delete Row</button>\n")])])]),e("h2",{attrs:{id:"_8-条件渲染"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-条件渲染"}},[t._v("#")]),t._v(" 8 条件渲染")]),t._v(" "),e("p",[t._v("React 中的条件渲染和 JavaScript 中的一致，使用 JavaScript 操作符 if 或条件运算符来创建表示当前状态的元素，然后让 React 根据它们来更新 UI")]),t._v(" "),e("p",[t._v("采用三元表达式或者&&运算符进行条件渲染")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function Mailbox(props) {\n  const unreadMessages = props.unreadMessages;\n  return (\n    <div>\n      <h1>Hello!</h1>\n      {unreadMessages.length > 0 &&\n        <h2>\n          You have {unreadMessages.length} unread messages.\n        </h2>\n      }\n    </div>\n  );\n}\n\nconst messages = ['React', 'Re: React', 'Re:Re: React'];\nReactDOM.render(\n  <Mailbox unreadMessages={messages} />,\n  document.getElementById('root')\n);\n")])])]),e("h2",{attrs:{id:"_9-列表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-列表"}},[t._v("#")]),t._v(" 9 列表")]),t._v(" "),e("p",[t._v("采用map函数来渲染多个组件，需要给每个组件指定唯一的key值")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    <li key={number.toString()}>\n      {number}\n    </li>\n  );\n  return (\n    <ul>{listItems}</ul>\n  );\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nReactDOM.render(\n  <NumberList numbers={numbers} />,\n  document.getElementById('root')\n);\n")])])]),e("h3",{attrs:{id:"_9-1-key的作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-1-key的作用"}},[t._v("#")]),t._v(" 9.1 key的作用")]),t._v(" "),e("p",[t._v("Keys可以在DOM中的某些元素被增加或删除的时候帮助React识别哪些元素发生了变化。因此你应当给数组中的每一个元素赋予一个确定的标识。在 React Diff 算法中 React 会借助元素的 Key 值来判断该元素是新近创建的还是被移动而来的元素，从而减少不必要的元素重渲染。")]),t._v(" "),e("h3",{attrs:{id:"_9-2-组合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-2-组合"}},[t._v("#")]),t._v(" 9.2 组合")]),t._v(" "),e("p",[t._v("两个父子组件，子组件不知道父组件传递的数据有哪些，但是需要将传递的值进行渲染，例如下面的例子，A组件将div标签传入了子组件，子组件通过props.children将传入的组件进行渲染。同时，props可以传递组件进去，这个功能类似于vue的slot插槽")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import React from 'react'\n\nfunction B(props) {\n  return (\n    <div>\n      {props.C}\n      {props.children}\n    </div>\n  )\n}\nfunction C() {\n  return (\n    <div>1111</div>\n  )\n}\nclass Practice extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      ha: 1\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <B C={<C/>}>\n          <div>hhhhh</div>\n        </B>\n      </div>\n    )\n  }\n}\n\nexport default Practice\n")])])]),e("h2",{attrs:{id:"_10-组件通信"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-组件通信"}},[t._v("#")]),t._v(" 10 组件通信")]),t._v(" "),e("h3",{attrs:{id:"_10-1-组件通讯"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-1-组件通讯"}},[t._v("#")]),t._v(" 10.1 组件通讯")]),t._v(" "),e("p",[e("strong",[t._v("在使用 React 的过程中，不可避免的需要组件间进行消息传递（通信），组件间通信大体有下面几种情况：")])]),t._v(" "),e("ol",[e("li",[t._v("父组件向子组件通信")])]),t._v(" "),e("p",[t._v("通过props进行传递，子组件在props对象上获取父组件传递的参数")]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("子组件向父组件通信")])]),t._v(" "),e("p",[t._v("在父组件中声明一个函数，将函数通过props传给子组件，子组件获取到函数，然后进行调用，此时父组件就能得到子组件传过来的参数，父组件就可以进行相应的操作。")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//父组件,创建一个add函数\nadd(newTodo){\n    console.log(newTodo)\n    //处理子组件传递的参数newTodo\n}\n\n//render函数中，将add函数传递给子组件AddList\n<AddList add={this.add}/>\n\n//=================\n\n//子组件中，通过props获取到add方法\naddList(){\n        //获取输入框内容\n        let newTodo=this.refs.newTodo.value\n        //this.props.add(newTodo)调用add函数，同时将newTodo参数传人，此时父组件中的add方法就能获取到子组件传递的参数newToDo\n        this.props.add(newTodo)\n    }\n\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[e("p",[t._v("非嵌套组件间通信")]),t._v(" "),e("p",[t._v("采用context和redux")])])]),t._v(" "),e("h2",{attrs:{id:"_11-生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-生命周期"}},[t._v("#")]),t._v(" 11 生命周期")]),t._v(" "),e("h3",{attrs:{id:"_11-1-生命周期流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-1-生命周期流程"}},[t._v("#")]),t._v(" 11.1 生命周期流程")]),t._v(" "),e("p",[t._v("组件的生命周期可分成三个状态：")]),t._v(" "),e("h4",{attrs:{id:"_1-mounting-挂载阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-mounting-挂载阶段"}},[t._v("#")]),t._v(" 1 Mounting：挂载阶段")]),t._v(" "),e("p",[t._v("挂载阶段指组件被创建到插入Dom的阶段")]),t._v(" "),e("p",[t._v("这个阶段会调用下面的方法：")]),t._v(" "),e("ul",[e("li",[t._v("constructor()")]),t._v(" "),e("li",[t._v("static getDerivedStateFromProps()")]),t._v(" "),e("li",[t._v("render()")]),t._v(" "),e("li",[t._v("componentDidMount()")])]),t._v(" "),e("p",[e("strong",[t._v("constructor()")]),t._v(":")]),t._v(" "),e("p",[t._v("用于绑定事件以及初始化state，此时组件未被挂载到dom上")]),t._v(" "),e("p",[e("strong",[t._v("getDerivedStateFromProps（）")])]),t._v(" "),e("p",[t._v("在初始化组件数据时, 我们有时需要将组件接收的参数 props 中的数据添加到它的 state 中, 期望组件响应 props 的变化.然而组件接收的 props 数据是只读的, 不可变的, 禁止修改的. 当组件接收了新的 props 时, constructor 函数中数据初始化行为并不会再次发生. 于是我们想要在 "),e("code",[t._v("getDerivedStateFromProps")]),t._v(" 生命周期函数中获取新的 props 并且调用 setState() 来更新数据.getDerivedStateFromProps 会在每次组件被重新渲染前被调用, 这意味着无论是"),e("strong",[t._v("父组件的更新, props 的变化, 或是组件内部执行了 setState(), 它都会被调用")]),t._v(".")]),t._v(" "),e("p",[e("strong",[t._v("componentDidmount()")])]),t._v(" "),e("p",[t._v("在这个阶段组件被挂载到dom元素上，通常在这个方法里面发起ajax请求")]),t._v(" "),e("h4",{attrs:{id:"_2-updating-更新阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-updating-更新阶段"}},[t._v("#")]),t._v(" 2 Updating：更新阶段")]),t._v(" "),e("p",[t._v("触发更新的情况：")]),t._v(" "),e("ol",[e("li",[t._v("传入的props更新")]),t._v(" "),e("li",[t._v("调用setState方法使state更新")]),t._v(" "),e("li",[t._v("通过forceUpdate方法强制更新")])]),t._v(" "),e("p",[t._v("在重新渲染之前调用")]),t._v(" "),e("p",[t._v("getDerivedStateFromProp")]),t._v(" "),e("p",[t._v("shouldComponentUpdate")]),t._v(" "),e("p",[t._v("render")]),t._v(" "),e("p",[t._v("getSnapshotBeforeUpdate")]),t._v(" "),e("p",[t._v("componentDidUpdate")]),t._v(" "),e("p",[e("strong",[t._v("shouldComponentUpdate(nextProps, nextState)")])]),t._v(" "),e("p",[t._v("当 props 或 state 发生变化时，"),e("code",[t._v("shouldComponentUpdate()")]),t._v(" 会在渲染执行之前被调用。返回值默认为 true。首次渲染或使用 "),e("code",[t._v("forceUpdate()")]),t._v(" 时不会调用该方法。")]),t._v(" "),e("p",[t._v("可以将 "),e("code",[t._v("this.props")]),t._v(" 与 "),e("code",[t._v("nextProps")]),t._v(" 以及 "),e("code",[t._v("this.state")]),t._v(" 与"),e("code",[t._v("nextState")]),t._v(" 进行比较，并返回 "),e("code",[t._v("false")]),t._v(" 以告知 React 可以跳过更新。请注意，返回 "),e("code",[t._v("false")]),t._v(" 并不会阻止子组件在 state 更改时重新渲染。")]),t._v(" "),e("p",[e("strong",[t._v("componentDidUpdate()")])]),t._v(" "),e("p",[e("code",[t._v("componentDidUpdate()")]),t._v(" 会在更新后会被立即调用。"),e("strong",[t._v("首次渲染不会执行此方法")]),t._v("。当组件更新后，可以在此处对 DOM 进行操作")]),t._v(" "),e("p",[t._v("（例如，当 props 未发生变化时，则不会执行网络请求）。")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("componentDidUpdate(prevProps，preState) {\n  // 典型用法（不要忘记比较 props）：\n  if (this.props.userID !== prevProps.userID) {\n    this.fetchData(this.props.userID);\n  }\n  if (this.state.userID !== prevState.userID))\n}\n")])])]),e("p",[t._v("你也可以在 "),e("code",[t._v("componentDidUpdate()")]),t._v(" 中"),e("strong",[t._v("直接调用 setState()")]),t._v("，但请注意"),e("strong",[t._v("它必须被包裹在一个条件语件里")]),t._v("，正如上述的例子那样进行处理，否则会导致死循环。它还会导致额外的重新渲染，虽然用户不可见，但会影响组件性能。")]),t._v(" "),e("h4",{attrs:{id:"_3-unmounting-卸载阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-unmounting-卸载阶段"}},[t._v("#")]),t._v(" 3 Unmounting：卸载阶段")]),t._v(" "),e("p",[t._v("当组件从dom中移除时会调用如下方法：")]),t._v(" "),e("p",[t._v("componentwillUnmount()")]),t._v(" "),e("p",[t._v("主要用于执行一些清理工作，比如取消网络请求，清楚多余的DOM元素等")]),t._v(" "),e("h4",{attrs:{id:"_4-错误处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-错误处理"}},[t._v("#")]),t._v(" 4 错误处理")]),t._v(" "),e("p",[t._v("当渲染过程，生命周期，或子组件的构造函数中抛出错误时，会调用如下方法：")]),t._v(" "),e("p",[t._v("static getDerivedStateFromError（）")]),t._v(" "),e("p",[t._v("componentDidCatch（）")]),t._v(" "),e("h4",{attrs:{id:"_5-生命周期图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-生命周期图"}},[t._v("#")]),t._v(" 5 生命周期图")]),t._v(" "),e("p",[t._v("![屏幕快照 2019-05-22 上午10.06.03](F:\\技术文件\\React\\image\\屏幕快照 2019-05-22 上午10.06.03.png)")]),t._v(" "),e("h3",{attrs:{id:"_11-2-常用方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-2-常用方法"}},[t._v("#")]),t._v(" 11.2 常用方法")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("生命周期方法")]),t._v(" "),e("th")])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("创建阶段")]),t._v(" "),e("td",[t._v("constructor、getDerivedStateFromProps、render、componentDidMount")])]),t._v(" "),e("tr",[e("td",[t._v("更新阶段")]),t._v(" "),e("td",[t._v("getDerivedStateFromProp、shouldComponentUpdate、render、getSnapshotBeforeUpdate、componentDidUpdate")])]),t._v(" "),e("tr",[e("td",[t._v("卸载阶段")]),t._v(" "),e("td",[t._v("componentwillUnmount")])])])]),t._v(" "),e("h4",{attrs:{id:"_1-render"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-render"}},[t._v("#")]),t._v(" 1 render()")]),t._v(" "),e("p",[e("code",[t._v("render()")]),t._v(" 方法是 class 组件中唯一必须实现的方法。")]),t._v(" "),e("p",[t._v("当 "),e("code",[t._v("render")]),t._v(" 被调用时，它会检查 "),e("code",[t._v("this.props")]),t._v(" 和 "),e("code",[t._v("this.state")]),t._v(" 的变化并返回以下类型之一：")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("React 元素")]),t._v("。通常通过 JSX 创建。例如，"),e("code",[t._v("<div />")]),t._v(" 会被 React 渲染为 DOM 节点，"),e("code",[t._v("<MyComponent />")]),t._v("会被 React 渲染为自定义组件，无论是 "),e("code",[t._v("<div />")]),t._v(" 还是 "),e("code",[t._v("<MyComponent />")]),t._v(" 均为 React 元素。")]),t._v(" "),e("li",[e("strong",[t._v("数组或 fragments")]),t._v("。 使得 render 方法可以返回多个元素。欲了解更多详细信息，请参阅 "),e("a",{attrs:{href:"https://react.docschina.org/docs/fragments.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("fragments"),e("OutboundLink")],1),t._v(" 文档。")]),t._v(" "),e("li",[e("strong",[t._v("Portals")]),t._v("。可以渲染子节点到不同的 DOM 子树中。欲了解更多详细信息，请参阅有关 "),e("a",{attrs:{href:"https://react.docschina.org/docs/portals.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("portals"),e("OutboundLink")],1),t._v(" 的文档")]),t._v(" "),e("li",[e("strong",[t._v("字符串或数值类型")]),t._v("。它们在 DOM 中会被渲染为文本节点")]),t._v(" "),e("li",[e("strong",[t._v("布尔类型或 null")]),t._v("。什么都不渲染。（主要用于支持返回 "),e("code",[t._v("test && <Child />")]),t._v(" 的模式，其中 test 为布尔类型。)")])]),t._v(" "),e("p",[e("code",[t._v("render()")]),t._v(" 函数应该为纯函数，这意味着在不修改组件 state 的情况下，每次调用时都返回相同的结果，并且它不会直接与浏览器交互。")]),t._v(" "),e("p",[t._v("注意")]),t._v(" "),e("p",[t._v("如果 "),e("code",[t._v("shouldComponentUpdate()")]),t._v(" 返回 false，则不会调用 "),e("code",[t._v("render()")]),t._v("。")]),t._v(" "),e("h4",{attrs:{id:"_2-constructor"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-constructor"}},[t._v("#")]),t._v(" 2 constructor")]),t._v(" "),e("p",[e("strong",[t._v("如果不初始化 state 或不进行方法绑定，则不需要为 React 组件实现构造函数。")])]),t._v(" "),e("p",[t._v("通常，在 React 中，构造函数仅用于以下两种情况：")]),t._v(" "),e("ul",[e("li",[t._v("通过给 "),e("code",[t._v("this.state")]),t._v(" 赋值对象来初始化内部state")]),t._v(" "),e("li",[t._v("为事件处理函数绑定实例")])]),t._v(" "),e("h4",{attrs:{id:"_5-componentwillunmount"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-componentwillunmount"}},[t._v("#")]),t._v(" 5 componentWillUnmount()")]),t._v(" "),e("p",[e("code",[t._v("componentWillUnmount()")]),t._v(" 会在组件卸载及销毁之前直接调用。在此方法中执行必要的清理操作，例如，清除 timer，取消网络请求或清除在 "),e("code",[t._v("componentDidMount()")]),t._v(" 中创建的订阅等。")]),t._v(" "),e("p",[e("code",[t._v("componentWillUnmount()")]),t._v(" 中"),e("strong",[t._v("不应调用 setState()")]),t._v("，因为该组件将永远不会重新渲染。组件实例卸载后，将永远不会再挂载它。")]),t._v(" "),e("h4",{attrs:{id:"_6-setstate"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-setstate"}},[t._v("#")]),t._v(" 6 setState()")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("setState(updater[, callback])\n")])])]),e("p",[e("code",[t._v("setState()")]),t._v(" 将对组件 state 的更改排入队列，并通知 React 需要使用更新后的 state 重新渲染此组件及其子组件。这是用于更新用户界面以响应事件处理器和处理服务器数据的主要方式")]),t._v(" "),e("p",[t._v("将 "),e("code",[t._v("setState()")]),t._v(" 视为"),e("em",[t._v("请求")]),t._v("而不是立即更新组件的命令。为了更好的感知性能，React 会延迟调用它，然后通过一次传递更新多个组件。React 并不会保证 state 的变更会立即生效。")]),t._v(" "),e("p",[e("code",[t._v("setState()")]),t._v(" 并不总是立即更新组件。它会批量推迟更新。这使得在调用 "),e("code",[t._v("setState()")]),t._v(" 后立即读取 "),e("code",[t._v("this.state")]),t._v(" 成为了隐患。为了消除隐患，请使用 "),e("code",[t._v("componentDidUpdate")]),t._v(" 或者 "),e("code",[t._v("setState")]),t._v(" 的回调函数（"),e("code",[t._v("setState(updater, callback)")]),t._v("），这两种方式都可以保证在应用更新后触发。如需基于之前的 state 来设置当前的 state，请阅读下述关于参数 "),e("code",[t._v("updater")]),t._v(" 的内容。")]),t._v(" "),e("p",[t._v("除非 "),e("code",[t._v("shouldComponentUpdate()")]),t._v(" 返回 "),e("code",[t._v("false")]),t._v("，否则 "),e("code",[t._v("setState()")]),t._v(" 将始终执行重新渲染操作。如果可变对象被使用，且无法在 "),e("code",[t._v("shouldComponentUpdate()")]),t._v(" 中实现条件渲染，那么仅在新旧状态不一时调用 "),e("code",[t._v("setState()")]),t._v("可以避免不必要的重新渲染")]),t._v(" "),e("h3",{attrs:{id:"_11-3-不常用方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-3-不常用方法"}},[t._v("#")]),t._v(" 11.3 不常用方法")]),t._v(" "),e("h4",{attrs:{id:"_3-getsnapshotbeforeupdate-prevprops-prevstate"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-getsnapshotbeforeupdate-prevprops-prevstate"}},[t._v("#")]),t._v(" 3 getSnapshotBeforeUpdate(prevProps, prevState)")]),t._v(" "),e("p",[e("code",[t._v("getSnapshotBeforeUpdate()")]),t._v(" 在最近一次渲染输出（提交到 DOM 节点）之前调用。它使得组件能在发生更改之前从 DOM 中捕获一些信息（例如，滚动位置）。此生命周期的任何返回值将作为参数传递给 "),e("code",[t._v("componentDidUpdate()")])]),t._v(" "),e("h4",{attrs:{id:"_4-forceupdate"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-forceupdate"}},[t._v("#")]),t._v(" 4 forceUpdate()")]),t._v(" "),e("p",[t._v("默认情况下，当组件的 state 或 props 发生变化时，组件将重新渲染。如果 "),e("code",[t._v("render()")]),t._v(" 方法依赖于其他数据，则可以调用 "),e("code",[t._v("forceUpdate()")]),t._v(" 强制让组件重新渲染。")]),t._v(" "),e("p",[t._v("调用 "),e("code",[t._v("forceUpdate()")]),t._v(" 将致使组件调用 "),e("code",[t._v("render()")]),t._v(" 方法，此操作会跳过该组件的 "),e("code",[t._v("shouldComponentUpdate()")]),t._v("。但其子组件会触发正常的生命周期方法，包括 "),e("code",[t._v("shouldComponentUpdate()")]),t._v(" 方法。如果标记发生变化，React 仍将只更新 DOM。")]),t._v(" "),e("p",[t._v("通常你应该避免使用 "),e("code",[t._v("forceUpdate()")]),t._v("，尽量在 "),e("code",[t._v("render()")]),t._v(" 只使用 "),e("code",[t._v("this.props")]),t._v(" 和 "),e("code",[t._v("this.state")])]),t._v(" "),e("h3",{attrs:{id:"_5-应用场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-应用场景"}},[t._v("#")]),t._v(" 5 应用场景")]),t._v(" "),e("p",[t._v("组件的初始化阶段的声明周期函数以及重点用法如下：")]),t._v(" "),e("ul",[e("li",[t._v('constructor(): 用于绑定事件以及初始化state（可以通过"fork"props的方式给state赋值）')]),t._v(" "),e("li",[t._v("componentWillMount(): 只会在服务端渲染时被调用，你可以在这里同步操作state")]),t._v(" "),e("li",[t._v("render(): 这个函数是用来渲染DOM没有错。"),e("strong",[t._v("但它只能用来渲染DOM，请保证它的纯粹性")]),t._v("。如果有操作DOM或者和浏览器打交道的一系列操作，请在下一步骤componentDidMount中进行")]),t._v(" "),e("li",[t._v("componentDidMount(): 如果你有第三方操作DOM的类库需要初始化（类似于jQuery，Bootstrap的一些组件）操作DOM、或者请求异步数据，都应该放在这个步骤中做")])]),t._v(" "),e("p",[t._v("组件更新阶段：")]),t._v(" "),e("ul",[e("li",[t._v("componentWillReceiveProps(nextProps): 在这里你可以拿到即将改变的状态，可以在这一步中通过setState方法设置state")]),t._v(" "),e("li",[t._v("shouldComponentUpdate(nextProps, nextState): "),e("strong",[t._v("这一步骤非常重要")]),t._v("，它的返回值决定了接下来的生命周期函数是否会被调用，默认返回true，即都会被调用；你也可以重写这个函数使它返回false。")]),t._v(" "),e("li",[t._v("componentWillUpdate(): 我也不知道这个声明周期函数的意义在哪里，在这个函数内你不能调用setState改变组件状态")]),t._v(" "),e("li",[t._v("render()")]),t._v(" "),e("li",[t._v("componentDidUpdate(): 和componentDidMount类似，在这里执行DOM操作以及发起网络请求")])]),t._v(" "),e("p",[t._v("组件析构阶段：")]),t._v(" "),e("ul",[e("li",[t._v("componentWillUnmount(): 主要用于执行一些清理工作，比如取消网络请求，清楚多余的DOM元素等")])]),t._v(" "),e("h2",{attrs:{id:"_12-ref属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_12-ref属性"}},[t._v("#")]),t._v(" 12 ref属性")]),t._v(" "),e("h3",{attrs:{id:"_12-1-使用场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_12-1-使用场景"}},[t._v("#")]),t._v(" 12.1 使用场景")]),t._v(" "),e("p",[t._v("下面是几个适合使用 refs 的情况：")]),t._v(" "),e("ul",[e("li",[t._v("处理焦点、文本选择或媒体控制。")]),t._v(" "),e("li",[t._v("触发强制动画。")]),t._v(" "),e("li",[t._v("集成第三方 DOM 库")])]),t._v(" "),e("p",[t._v("如果可以通过声明式实现，则尽量避免使用 refs。")]),t._v(" "),e("p",[t._v("ref的值取决于节点的类型:")]),t._v(" "),e("ul",[e("li",[t._v("当 "),e("code",[t._v("ref")]),t._v(" 属性被用于一个普通的 HTML 元素时，"),e("code",[t._v("React.createRef()")]),t._v(" 将接收底层 DOM 元素作为它的 "),e("code",[t._v("current")]),t._v(" 属性以创建 "),e("code",[t._v("ref")]),t._v(" 。")]),t._v(" "),e("li",[t._v("当 "),e("code",[t._v("ref")]),t._v(" 属性被用于一个自定义类组件时，"),e("code",[t._v("ref")]),t._v(" 对象将接收该组件已挂载的实例作为它的 "),e("code",[t._v("current")]),t._v(" 。")]),t._v(" "),e("li",[e("strong",[t._v("你不能在函数式组件上使用 ref 属性")]),t._v("，因为它们没有实例。")])]),t._v(" "),e("p",[t._v("下面的例子说明了这些差异。")]),t._v(" "),e("h3",{attrs:{id:"_12-2-refs使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_12-2-refs使用"}},[t._v("#")]),t._v(" 12.2 refs使用")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('  focusTextInput() {\n    // 直接使用原生 API 使 text 输入框获得焦点\n    // 注意：通过 "current" 取得 DOM 节点\n    this.textInput.current.focus();\n  }\n\n  render() {\n    // 告诉 React 我们想把 <input> ref 关联到构造器里创建的 `textInput` 上\n    return (\n      <div>\n        <input\n          type="text"\n          ref={this.textInput} />\n\n          \n        <input\n          type="button"\n          value="Focus the text input"\n          onClick={this.focusTextInput}\n        />\n      </div>\n    );\n  }\n}\n')])])]),e("h2",{attrs:{id:"_13虚拟dom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_13虚拟dom"}},[t._v("#")]),t._v(" 13虚拟dom")]),t._v(" "),e("h3",{attrs:{id:"_13-1定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_13-1定义"}},[t._v("#")]),t._v(" 13.1定义")]),t._v(" "),e("p",[t._v("虚拟DOM"),e("strong",[t._v("简而言之就是，用JS去按照DOM结构来实现的树形结构对象，你也可以叫做")]),t._v("DOM对象")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("一个虚拟DOM(元素)是一个一般的js对象, 准确的说是一个对象树(倒立的)")])]),t._v(" "),e("li",[e("p",[t._v("虚拟DOM保存了真实DOM的层次关系和一些基本属性，与真实DOM一一对应")])]),t._v(" "),e("li",[e("p",[t._v("如果只是更新虚拟DOM, 页面是不会重绘的")])]),t._v(" "),e("li",[e("p",[t._v("Virtual DOM 算法的基本步骤")]),t._v(" "),e("ul",[e("li",[t._v("用 JavaScript 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 DOM 树，插到文档当中")]),t._v(" "),e("li",[t._v("当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异")]),t._v(" "),e("li",[t._v("把2所记录的差异应用到步骤1所构建的真正的DOM树上，视图就更新了")])])]),t._v(" "),e("li",[e("p",[t._v("进一步理解")]),t._v(" "),e("ul",[e("li",[t._v("Virtual DOM 本质上就是在 JS 和 DOM 之间做了一个缓存。")]),t._v(" "),e("li",[t._v("可以类比 CPU 和硬盘，既然硬盘这么慢，我们就在它们之间加个缓存：既然 DOM 这么慢，我们就在它们 JS 和 DOM 之间加个缓存。CPU（JS）只操作内存（Virtual DOM），最后的时候再把变更写入硬盘（DOM）。")])])])]),t._v(" "),e("h3",{attrs:{id:"_13-2-diff算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_13-2-diff算法"}},[t._v("#")]),t._v(" 13.2 diff算法")]),t._v(" "),e("ul",[e("li")]),t._v(" "),e("h2",{attrs:{id:"_14-高阶组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_14-高阶组件"}},[t._v("#")]),t._v(" 14 高阶组件")]),t._v(" "),e("p",[e("strong",[t._v("高阶组件是一个函数，能够接受一个组件并返回一个新的组件")])]),t._v(" "),e("h3",{attrs:{id:"_14-1-使用原因"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_14-1-使用原因"}},[t._v("#")]),t._v(" 14.1 使用原因")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("复用代码。很多个react组件都需要公用同一个逻辑，可以将公用的逻辑抽离出来，然后采用高阶组件的方式去应用")])]),t._v(" "),e("li",[e("p",[t._v("修改现有react组件。有些react组件不是自己开发或者是第三方，不想去修改原有组件，可以采用高阶组件")])])]),t._v(" "),e("h3",{attrs:{id:"_14-2-实现方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_14-2-实现方式"}},[t._v("#")]),t._v(" 14.2 实现方式")]),t._v(" "),e("h4",{attrs:{id:"_1-代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-代理"}},[t._v("#")]),t._v(" 1 代理")]),t._v(" "),e("h4",{attrs:{id:"_2-继承"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-继承"}},[t._v("#")]),t._v(" 2 继承")]),t._v(" "),e("h3",{attrs:{id:"_14-3-遵循原则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_14-3-遵循原则"}},[t._v("#")]),t._v(" 14.3 遵循原则")]),t._v(" "),e("p",[t._v("1、不要修改原始组件")]),t._v(" "),e("p",[t._v("常见做法是通过修改原组件的prototype来重写其生命周期方法等（如给WrappedComponent.prototype.componentWillReceiveProps重新赋值）。请使用纯函数返回新的组件，因为一旦修改原组件，就失去了组件复用的意义。")]),t._v(" "),e("p",[t._v("2、props保持一致")]),t._v(" "),e("p",[t._v("高阶组件在为子组件添加特性的同时，要保持子组件的原有的props不受影响。传入的组件和返回的组件在props上尽量保持一致。")]),t._v(" "),e("p",[t._v("3、保持可组合性")]),t._v(" "),e("p",[t._v("4、displayName")]),t._v(" "),e("p",[t._v("为了方便调试，最常见的高阶组件命名方式是将子组件名字包裹起来。")]),t._v(" "),e("p",[t._v("5、不要在render方法内部使用高阶组件")]),t._v(" "),e("p",[t._v("render中的高阶组件会在每次render时重新mount，之前组件内部的state也会丢失。")]),t._v(" "),e("h3",{attrs:{id:"_14-3-使用场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_14-3-使用场景"}},[t._v("#")]),t._v(" 14.3 使用场景")]),t._v(" "),e("p",[t._v("关于高阶组件解决的问题可以简单概括成以下几个方面：")]),t._v(" "),e("ul",[e("li",[t._v("代码复用：这是高阶组件最基本的功能。组件是React中最小单元，两个相似度很高的组件通过将组件重复部分抽取出来，再通过高阶组件扩展，增删改props，可达到组件可复用的目的；")]),t._v(" "),e("li",[t._v("条件渲染：控制组件的渲染逻辑，常见case：鉴权；")]),t._v(" "),e("li",[t._v("生命周期捕获/劫持：借助父组件子组件生命周期规则捕获子组件的生命周期，常见case：打点。")])]),t._v(" "),e("p",[t._v("1 操作props")]),t._v(" "),e("p",[t._v("2 抽取状态")]),t._v(" "),e("h2",{attrs:{id:"_15mock-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_15mock-js"}},[t._v("#")]),t._v(" 15mock.js")]),t._v(" "),e("p",[t._v("安装：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("npm install axios\nnpm install mock.js\n")])])]),e("p",[t._v("使用教程：")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("编写模拟数据")])]),t._v(" "),e("li",[e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var Mock = require('mockjs')\n\nvar data = Mock.mock('/api/list', {\n  // 属性 list 的值是一个数组，其中含有 1 到 10 个元素\n  'list|1-10': [{\n    // 属性 id 是一个自增数，起始值为 1，每次增 1\n    'id|+1': 1\n  }]\n})\n// 输出结果\nexport default data\n\n")])])])]),t._v(" "),e("li",[e("p",[t._v("在需要模拟的组件中引入数据")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import '../mock/mock'\n")])])])]),t._v(" "),e("li",[e("p",[t._v("在组件中发送请求")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 发送ajxa请求\n  componentDidMount () {\n    axios.get('/api/list').then((response) => {\n      console.log(response.data)\n      // this.setState({\n      //   todoList: response.data.todoList\n      // })\n    }).catch((error) => {\n      console.log(error)\n    })\n  }\n")])])])])]),t._v(" "),e("h2",{attrs:{id:"_16-react发送ajax"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_16-react发送ajax"}},[t._v("#")]),t._v(" 16 react发送ajax")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("axios")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("componentDidMount () {\n    axios.get(' https://easy-mock.com/mock/5d1dae3f2945dd709a70c603/api/list/').then((response) => {\n      console.log(response)\n      let todoList = response.data.todoList\n      console.log(todoList)\n      this.setState({\n        todoList: todoList\n      })\n    }).catch((error) => {\n      console.log(error)\n    })\n  }\n")])])])]),t._v(" "),e("li",[e("p",[t._v("Fetch")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("componentDidMount () {\n    fetch('https://easy-mock.com/mock/5d1dae3f2945dd709a70c603/api/list/')\n      .then((response) => {\n        return response.json()\n      })\n      .then(data => {\n        this.setState({\n          todoList: data.todoList\n        })\n      })\n      .catch((error) => {\n        console.log(error)\n      })\n  }\n")])])])])]),t._v(" "),e("p",[e("code",[t._v("fetch")]),t._v(" 是浏览器内置对象，所以我们不用安装包，直接使用")]),t._v(" "),e("ul",[e("li",[t._v("使用流程\n"),e("ul",[e("li",[t._v("fetch ...")]),t._v(" "),e("li",[t._v("then => res.json()")]),t._v(" "),e("li",[t._v("then => data")])])])]),t._v(" "),e("blockquote",[e("p",[t._v("注意需要执行一次 "),e("code",[t._v("res.json()")]),t._v(" 方法才能获取数据")])]),t._v(" "),e("h2",{attrs:{id:"_17-proptype类型校验"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_17-proptype类型校验"}},[t._v("#")]),t._v(" 17  proptype类型校验")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import PropTypes from 'prop-types';\n\nclass Greeting extends React.Component {\n  render() {\n    return (\n      <h1>Hello, {this.props.name}</h1>\n    );\n  }\n}\n\nGreeting.propTypes = {\n  name: PropTypes.string\n}\n")])])]),e("h4",{attrs:{id:"默认值设置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#默认值设置"}},[t._v("#")]),t._v(" 默认值设置")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class Greeting extends React.Component {\n  render() {\n    return (\n      <h1>Hello, {this.props.name}</h1>\n    );\n  }\n}\n\n// 为属性指定默认值:\nGreeting.defaultProps = {\n  name: 'Stranger'\n};\n\n// 渲染 \"Hello, Stranger\":\nReactDOM.render(\n  <Greeting />,\n  document.getElementById('example')\n);\n")])])]),e("h2",{attrs:{id:"_18-context"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_18-context"}},[t._v("#")]),t._v(" 18 context")]),t._v(" "),e("h3",{attrs:{id:"_18-1-基本使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_18-1-基本使用"}},[t._v("#")]),t._v(" 18.1 基本使用")]),t._v(" "),e("p",[t._v("使用步奏")]),t._v(" "),e("ol",[e("li",[t._v("先创建context对象，是在外层的组件中写")]),t._v(" "),e("li",[t._v("采用context.provider将需要接受参数的组件包裹，这样子组件就能访问上面的值")]),t._v(" "),e("li",[t._v("在需要接受参数的组件中，声明contextType属性")]),t._v(" "),e("li",[t._v("在需要接受参数的组件中，通过this.context就能获取值")])]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import React from 'react'\n\n\n//1 先创建一个context对象\nconst Hacontext = React.createContext('light')\n\nclass Practice extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      value: {\n        ha: 1,\n        he: (val) => {\n          console.log('heheh',val)\n        }\n      }\n    }\n  }\n  render() {\n\n    return (\n      <div>\n        {/* 2 将子组件包起来，这样就可以传递到子组件,value为要传的数据 */}\n        <Hacontext.Provider value={this.state.value}>\n          <B />\n        </Hacontext.Provider>\n      </div>\n    )\n  }\n}\n\n\nclass B extends React.Component {\n  // 3 声明类型\n  static contextType = Hacontext\n  render() {\n    const { ha, he } = this.context\n    return (\n      <div>\n        {/*4  通过this.context获取值 */}\n        <div onClick={() => he(2)}>{ha}</div>\n        <Hacontext.Consumer>\n          {\n            ({ ha, he }) => {\n              return (\n                <div onClick={()=>he(222222)}>\n                  {ha}\n                </div>\n              )\n            }\n            }\n        </Hacontext.Consumer>\n      </div >\n    )\n  }\n}\n\n\nexport default Practice\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);