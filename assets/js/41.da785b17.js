(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{397:function(t,a,e){"use strict";e.r(a);var s=e(42),_=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"git学习笔记"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git学习笔记"}},[t._v("#")]),t._v(" git学习笔记")]),t._v(" "),e("h2",{attrs:{id:"_1-环境安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-环境安装"}},[t._v("#")]),t._v(" 1 环境安装")]),t._v(" "),e("h3",{attrs:{id:"_1-1-软件下载安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-软件下载安装"}},[t._v("#")]),t._v(" 1.1 软件下载安装")]),t._v(" "),e("p",[t._v("Git 各平台安装包下载地址为：http://git-scm.com/downloads")]),t._v(" "),e("p",[t._v("git 管理工具sourcetree下载")]),t._v(" "),e("p",[t._v("https://www.sourcetreeapp.com/")]),t._v(" "),e("p",[e("strong",[t._v("sourcetree使用教程")])]),t._v(" "),e("p",[t._v("官方教程：https://confluence.atlassian.com/get-started-with-sourcetree/connect-your-bitbucket-or-github-account-847359096.html")]),t._v(" "),e("p",[t._v("详细教程：掘金https://juejin.im/post/5b21d750e51d450688136ad3")]),t._v(" "),e("h3",{attrs:{id:"_1-2-配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-配置"}},[t._v("#")]),t._v(" 1.2 配置")]),t._v(" "),e("h4",{attrs:{id:"_1-2-1-用户信息配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-用户信息配置"}},[t._v("#")]),t._v(" 1.2.1 用户信息配置")]),t._v(" "),e("p",[e("strong",[t._v("git自带vim编辑器，在文件中可以用vim命令")])]),t._v(" "),e("p",[t._v("设置用户名和邮箱")]),t._v(" "),e("div",{staticClass:"language-git extra-class"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[t._v("//全局配置\ngit config --global username "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"用户名"')]),t._v("\ngit config --global user.email "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"邮箱"')]),t._v("\n//单个项目配置\ngit config --local username "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"用户名"')]),t._v("\ngit config --local user.email "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"邮箱"')]),t._v("\n")])])]),e("p",[t._v("查看配置信息：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git config --list\n")])])]),e("h4",{attrs:{id:"_1-2-2-mac配置git-权限"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-mac配置git-权限"}},[t._v("#")]),t._v(" 1.2.2 Mac配置git 权限")]),t._v(" "),e("p",[t._v("给git 初始化仓库添加文件时，报错warning: xxxxxx:Permission defined")]),t._v(" "),e("p",[t._v("解决步骤：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("cd ~ 进入根目录")])]),t._v(" "),e("li",[e("p",[t._v("ls -al 查看是否有.config文件")])]),t._v(" "),e("li",[e("p",[t._v("如果有，查看.config的文件权限是否为root，是则需要配置权限。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("运行命令sudo chown 用户名  .config\n")])])])]),t._v(" "),e("li",[e("p",[t._v("如果没有需要配置环境变量")])]),t._v(" "),e("li",[e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('cd ~\nvim ~/.bash_profile\ni       //进入vim编辑状态\nexport PATH="/usr/local/bin:$PATH" //这个路径是git的安装路径，执行 which git可以查看git安装路径\n然后给按照上面的步骤配置权限\n')])])])])]),t._v(" "),e("h3",{attrs:{id:"_1-3-终端机常用命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-终端机常用命令"}},[t._v("#")]),t._v(" 1.3 终端机常用命令")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("windows")]),t._v(" "),e("th",[t._v("macos/linux")]),t._v(" "),e("th",[t._v("说明")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("cd")]),t._v(" "),e("td",[t._v("cd")]),t._v(" "),e("td",[t._v("切换目录")])]),t._v(" "),e("tr",[e("td",[t._v("cd")]),t._v(" "),e("td",[t._v("pwd")]),t._v(" "),e("td",[t._v("获取当前所在位置")])]),t._v(" "),e("tr",[e("td",[t._v("dir")]),t._v(" "),e("td",[t._v("ls")]),t._v(" "),e("td",[t._v("列出当前的文件列表")])]),t._v(" "),e("tr",[e("td",[t._v("mkdir")]),t._v(" "),e("td",[t._v("mkdir")]),t._v(" "),e("td",[t._v("创建新的目录")])]),t._v(" "),e("tr",[e("td",[t._v("无")]),t._v(" "),e("td",[t._v("touch")]),t._v(" "),e("td",[t._v("创建文件")])]),t._v(" "),e("tr",[e("td",[t._v("copy")]),t._v(" "),e("td",[t._v("cp")]),t._v(" "),e("td",[t._v("复制文件")])]),t._v(" "),e("tr",[e("td",[t._v("move")]),t._v(" "),e("td",[t._v("mv")]),t._v(" "),e("td",[t._v("移动文件")])]),t._v(" "),e("tr",[e("td",[t._v("del")]),t._v(" "),e("td",[t._v("rm")]),t._v(" "),e("td",[t._v("删除文件")])]),t._v(" "),e("tr",[e("td",[t._v("cls")]),t._v(" "),e("td",[t._v("clear")]),t._v(" "),e("td",[t._v("清除画面上的内容")])])])]),t._v(" "),e("blockquote",[e("p",[t._v("查询配置信息")])]),t._v(" "),e("ol",[e("li",[t._v("列出当前配置："),e("code",[t._v("git config --list")]),t._v(";")]),t._v(" "),e("li",[t._v("列出repository配置："),e("code",[t._v("git config --local --list")]),t._v(";")]),t._v(" "),e("li",[t._v("列出全局配置："),e("code",[t._v("git config --global --list")]),t._v(";")]),t._v(" "),e("li",[t._v("列出系统配置："),e("code",[t._v("git config --system --list")]),t._v(";")])]),t._v(" "),e("blockquote",[e("p",[t._v("第一次使用git，配置用户信息")])]),t._v(" "),e("ol",[e("li",[t._v("配置用户名："),e("code",[t._v('git config --global user.name "your name"')]),t._v(";")]),t._v(" "),e("li",[t._v("配置用户邮箱："),e("code",[t._v('git config --global user.email "youremail@github.com"')]),t._v(";")])]),t._v(" "),e("blockquote",[e("p",[t._v("其他配置")])]),t._v(" "),e("ol",[e("li",[t._v("配置解决冲突时使用哪种差异分析工具，比如要使用vimdiff："),e("code",[t._v("git config --global merge.tool vimdiff")]),t._v(";")]),t._v(" "),e("li",[t._v("配置git命令输出为彩色的："),e("code",[t._v("git config --global color.ui auto")]),t._v(";")]),t._v(" "),e("li",[t._v("配置git使用的文本编辑器："),e("code",[t._v("git config --global core.editor vi")]),t._v(";")])]),t._v(" "),e("h3",{attrs:{id:"_1-4-配置ssh"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-配置ssh"}},[t._v("#")]),t._v(" 1.4 配置ssh")]),t._v(" "),e("p",[t._v("报错：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Pushing to git@github.com:1563610087/todolist-react.git\n\nWarning: Permanently added the RSA host key for IP address '192.30.253.113' to the list of known hosts.\n\ngit@github.com: Permission denied (publickey).\n\nfatal: Could not read from remote repository.\n\n需要设置ssh key\n")])])]),e("p",[t._v("流程：")]),t._v(" "),e("p",[t._v("在 github 或者gitlab上添加 SSH key 的步骤：")]),t._v(" "),e("h4",{attrs:{id:"_1-4-1-检查是否存在ssh"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-1-检查是否存在ssh"}},[t._v("#")]),t._v(" 1.4.1 检查是否存在ssh")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("运行 git Bash 客户端，输入如下代码：")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ cd ~/.ssh\n$ ls\n")])])]),e("p",[t._v("是检查是否已经存在 id_rsa.pub 或 id_dsa.pub 文件，如果文件已经存在，跳过步骤2，直接进入步骤3。")]),t._v(" "),e("h4",{attrs:{id:"_1-4-2-创建ssh"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-2-创建ssh"}},[t._v("#")]),t._v(" 1.4.2 创建ssh")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("创建一个 SSH key")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('ssh-keygen -t rsa -C "your_email@example.com"\n')])])]),e("p",[t._v("代码参数含义：\n-t 指定密钥类型，默认是 rsa ，可以省略。\n-C 设置注释文字，比如邮箱。\n-f 指定密钥文件存储文件名。")]),t._v(" "),e("p",[t._v("以上代码省略了 -f 参数，因此，运行上面那条命令后会让你输入一个文件名，用于保存刚才生成的 SSH key 代码，如：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Generating public/private rsa key pair.\n# Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]\n")])])]),e("p",[t._v("当然，你也可以不输入文件名，使用默认文件名（推荐），那么就会生成 id_rsa 和 id_rsa.pub 两个秘钥文件。")]),t._v(" "),e("p",[t._v("接着又会提示你输入两次密码（该密码是你push文件的时候要输入的密码，而不是github管理者的密码），\n当然，你也可以不输入密码，直接按回车。那么push的时候就不需要输入密码，直接提交到github上了，如：")]),t._v(" "),e("p",[t._v("Enter passphrase (empty for no passphrase):")]),t._v(" "),e("p",[t._v("Enter same passphrase again:")]),t._v(" "),e("p",[t._v("接下来，就会显示如下代码提示，如：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Your identification has been saved in /c/Users/you/.ssh/id_rsa.\n# Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.\n# The key fingerprint is:\n# 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com\n")])])]),e("h4",{attrs:{id:"_1-4-3-添加ssh公钥"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-3-添加ssh公钥"}},[t._v("#")]),t._v(" 1.4.3 添加ssh公钥")]),t._v(" "),e("p",[t._v("添加你的 SSH key 到 github上面去**")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("首先你需要拷贝 id_rsa.pub 文件的内容，vim 打开")])]),t._v(" "),e("li",[e("p",[t._v("登录你的github账号，从右上角的设置（ Account Settings ）进入，然后点击菜单栏的 SSH key 进入页面添加 SSH key。")])]),t._v(" "),e("li",[e("p",[t._v("点击 Add SSH key 按钮添加一个 SSH key 。把你复制的 SSH key 代码粘贴到 key 所对应的输入框中，记得 SSH key 代码的前后不要留有空格或者回车。当然，上面的 Title 所对应的输入框你也可以输入一个该 SSH key 显示在 github 上的一个别名。默认的会使用你的邮件名称。")])]),t._v(" "),e("li",[e("p",[t._v("测试一下该SSH key\n首先要给github bash输入一下代码")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ ssh -T git@github.com\n")])])]),e("p",[t._v("当你输入以上代码时，会有一段警告代码，如：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("The authenticity of host 'github.com (207.97.227.239)' can't be established.\n\nRSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\n\nAre you sure you want to continue connecting (yes/no)?\n")])])]),e("h2",{attrs:{id:"_2-git原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-git原理"}},[t._v("#")]),t._v(" 2 git原理")]),t._v(" "),e("h3",{attrs:{id:"_2-1-git工作流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-git工作流程"}},[t._v("#")]),t._v(" 2.1 git工作流程")]),t._v(" "),e("p",[t._v("一般工作流程如下：")]),t._v(" "),e("ul",[e("li",[t._v("克隆 Git 资源作为工作目录。")]),t._v(" "),e("li",[t._v("在克隆的资源上添加或修改文件。")]),t._v(" "),e("li",[t._v("如果其他人修改了，你可以更新资源。")]),t._v(" "),e("li",[t._v("在提交前查看修改。")]),t._v(" "),e("li",[t._v("提交修改。")]),t._v(" "),e("li",[t._v("在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。")])]),t._v(" "),e("p",[t._v("下图展示了 Git 的工作流程：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://www.runoob.com/wp-content/uploads/2015/02/git-process.png",alt:"img"}})]),t._v(" "),e("h3",{attrs:{id:"_2-2-基本原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-基本原理"}},[t._v("#")]),t._v(" 2.2 基本原理")]),t._v(" "),e("p",[t._v("git的通用操作流程如下图（来源于网络）")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/4/25/162fcc0987bf1c0a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"git操作通用流程"}})]),t._v(" "),e("p",[t._v("主要涉及到四个关键点：")]),t._v(" "),e("ol",[e("li",[t._v("工作区：本地电脑存放项目文件的地方，比如learnGitProject文件夹；")]),t._v(" "),e("li",[t._v("暂存区（Index/Stage）：在使用git管理项目文件的时候，其本地的项目文件会多出一个.git的文件夹，将这个.git文件夹称之为版本库。其中.git文件夹中包含了两个部分，一个是暂存区（Index或者Stage）,顾名思义就是暂时存放文件的地方，通常使用add命令将工作区的文件添加到暂存区里；")]),t._v(" "),e("li",[t._v("本地仓库：.git文件夹里还包括git自动创建的master分支，并且将HEAD指针指向master分支。使用commit命令可以将暂存区中的文件添加到本地仓库中；")]),t._v(" "),e("li",[t._v("远程仓库：不是在本地仓库中，项目代码在远程git服务器上，比如项目放在github上，就是一个远程仓库，通常使用clone命令将远程仓库拷贝到本地仓库中，开发后推送到远程仓库中即可；")])]),t._v(" "),e("h3",{attrs:{id:"_2-3-工作区、暂存区、版本库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-工作区、暂存区、版本库"}},[t._v("#")]),t._v(" 2.3 工作区、暂存区、版本库")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/4/25/162fcc0e7e711dc7?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"git几个核心区域间的关系"}})]),t._v(" "),e("ul",[e("li",[t._v('图中左侧为工作区，右侧为版本库。在版本库中标记为 "index" 的区域是暂存区（stage/index），标记为 "master" 的是 master 分支所代表的目录树。')]),t._v(" "),e("li",[t._v('图中我们可以看出此时 "HEAD" 实际是指向 master 分支的一个"游标"。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。')]),t._v(" "),e("li",[t._v('图中的 objects 标识的区域为 Git 的对象库，实际位于 ".git/objects" 目录下，里面包含了创建的各种对象及内容。')]),t._v(" "),e("li",[t._v("当对工作区修改（或新增）的文件执行 "),e("strong",[t._v("git add")]),t._v(" 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。")]),t._v(" "),e("li",[t._v("当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。")]),t._v(" "),e("li",[t._v("当执行 "),e("strong",[t._v("git reset HEAD")]),t._v(" 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。")]),t._v(" "),e("li",[t._v("当执行 **git rm --cached ** 命令时，会直接从暂存区删除文件，工作区则不做出改变。")]),t._v(" "),e("li",[t._v("当执行 "),e("strong",[t._v("git checkout .")]),t._v(" 或者 **git checkout -- ** 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。")]),t._v(" "),e("li",[t._v("当执行 "),e("strong",[t._v("git checkout HEAD .")]),t._v(" 或者 **git checkout HEAD ** 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。")])]),t._v(" "),e("p",[t._v("日常开发时代码实际上放置在工作区中，也就是本地的XXX.java这些文件，通过add等这些命令将代码文教提交给暂存区（Index/Stage），也就意味着代码全权交给了git进行管理，之后通过commit等命令将暂存区提交给master分支上，也就是意味打了一个版本，也可以说代码提交到了本地仓库中。另外，团队协作过程中自然而然还涉及到与远程仓库的交互。")]),t._v(" "),e("p",[t._v("因此，经过这样的分析，git命令可以分为这样的逻辑进行理解和记忆：")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("git管理配置的命令；")]),t._v(" "),e("p",[e("strong",[t._v("几个核心存储区的交互命令：")])])]),t._v(" "),e("li",[e("p",[t._v("工作区与暂存区的交互；")])]),t._v(" "),e("li",[e("p",[t._v("暂存区与本地仓库（分支）上的交互；")])]),t._v(" "),e("li",[e("p",[t._v("本地仓库与远程仓库的交互。")])])]),t._v(" "),e("h2",{attrs:{id:"_3-git基本操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-git基本操作"}},[t._v("#")]),t._v(" 3 git基本操作")]),t._v(" "),e("h3",{attrs:{id:"_3-1-创建目录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-创建目录"}},[t._v("#")]),t._v(" 3.1 创建目录")]),t._v(" "),e("p",[t._v("创建一个版本库非常简单，首先，选择一个合适的地方，创建一个空目录：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ mkdir learngit\n$ cd learngit\n$ pwd\n/Users/michael/learngit\n")])])]),e("p",[e("code",[t._v("pwd")]),t._v("命令用于显示当前目录。在我的Mac上，这个仓库位于"),e("code",[t._v("/Users/michael/learngit")])]),t._v(" "),e("h3",{attrs:{id:"_3-2-git初始化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-git初始化"}},[t._v("#")]),t._v(" 3.2 git初始化")]),t._v(" "),e("div",{staticClass:"language-git extra-class"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[e("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git init")]),t._v("\n")])])]),e("p",[t._v("通过"),e("code",[t._v("git init")]),t._v("命令把这个目录变成Git可以管理的仓库")]),t._v(" "),e("h3",{attrs:{id:"_3-3-添加文件到git仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-添加文件到git仓库"}},[t._v("#")]),t._v(" 3.3 添加文件到git仓库")]),t._v(" "),e("h4",{attrs:{id:"_3-3-1-操作流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-1-操作流程"}},[t._v("#")]),t._v(" 3.3.1 操作流程")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("第一步，用命令"),e("code",[t._v("git add")]),t._v("告诉Git，改动的文件添加到暂缓区：")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("//添加单个文件\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" readme.txt\n//添加整个文件夹\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" 文件夹/\n//添加所有改动的文件\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" --all\n")])])])]),t._v(" "),e("li",[e("p",[t._v("第二步，用命令"),e("code",[t._v("git commit")]),t._v("告诉Git，将暂缓区的文件提交到本地仓库：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('$ git commit -m "wrote a readme file"\n[master (root-commit) eaadf4e] wrote a readme file\n 1 file changed, 2 insertions(+)\n create mode 100644 readme.txt\n')])])]),e("p",[e("code",[t._v("git commit")]),t._v("命令，"),e("code",[t._v("-m")]),t._v("后面输入的是本次提交的说明，可以输入任意内容，一般是说明此次文件的改动，这样你就能从历史记录里方便地找到改动记录")])]),t._v(" "),e("li",[e("p",[t._v("查看历史提交信息：如下\n"),e("code",[t._v("git log")])])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("PS F:\\前端\\gitTest> git log\ncommit 9d6b558e4f7a405999bdc17af17a1ceb5e1dd46b (HEAD -> master)\nAuthor: jiange <1563610087@qq.com>\nDate:   Sun Nov 1 11:26:50 2020 +0800\n")])])]),e("p",[t._v("commit后面的9d6b558e4f7a405999bdc17af17a1ceb5e1dd46b是采用sha-1算法生成的，每次提交都会生成这样的字符串标识唯一的提交记录")]),t._v(" "),e("p",[t._v("​\t"),e("code",[t._v("git log --oneline")])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("//这个命令可以将提交记录简化成1行\nPS F:"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("前端"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("gitTest"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --oneline\n013b449 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("HEAD -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" master"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 增加样式\n6d320c2 第一次改动\n9d6b558 项目初始化2\n44703f6 项目初始化\n")])])]),e("h4",{attrs:{id:"_3-3-2-git-commit常见操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-2-git-commit常见操作"}},[t._v("#")]),t._v(" 3.3.2 "),e("strong",[t._v("git commit常见操作")])]),t._v(" "),e("p",[e("strong",[t._v("1 修改上一次commit中的提交的说明内容")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('git commit --amend -m "要修改的内容"\n')])])]),e("div",{staticClass:"language-JavaScript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//执行命令前，最新的提交信息为：增加样式")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PS")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("F")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\\前端\\gitTest"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" git log "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("oneline\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("013")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("b449")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HEAD")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" master"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 增加样式\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("d320c2 第一次改动\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v("d6b558 项目初始化"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("44703")]),t._v("f6 项目初始化\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//执行命令后，最新的提交信息：修改主页样式，同时也改变了上一次提交的sha-1字符串，由013b449变为ad7705b")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PS")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("F")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\\前端\\gitTest"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" git commit "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("amend "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("m "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"修改主页样式"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("master ad7705b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" 修改主页样式\n Date"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Sun Nov "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("01")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0800")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" file changed"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertions")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n create mode "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("100644")]),t._v(" index"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("css\n")])])]),e("p",[e("strong",[t._v("2 删除上一次的commit")])]),t._v(" "),e("p",[e("strong",[t._v("3 追加一个文件到最近的commit")])]),t._v(" "),e("p",[t._v("刚进行了commit，发现还有一个文件忘记提交，想把这个文件加到最近的一个commit，而不是在重新commit一次")]),t._v(" "),e("p",[t._v("操作：")]),t._v(" "),e("p",[t._v("文件如果还是untracked状态，先将文件add进缓存区")]),t._v(" "),e("p",[t._v("然后执行命令")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git commit --amend --no-edit\n")])])]),e("h3",{attrs:{id:"_3-4-git查询历史记录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-git查询历史记录"}},[t._v("#")]),t._v(" 3.4 git查询历史记录")]),t._v(" "),e("p",[t._v("查询某个人的提交记录")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('git log --oneline --author="jiange"\n')])])]),e("p",[t._v("查询提交的信息包含某些关键字")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('git log --oneline --grep="关键字"\n')])])]),e("p",[t._v("通过sourceTree可以直接搜索，在主界面-search-进行搜索")]),t._v(" "),e("h3",{attrs:{id:"_3-5-版本回退"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-版本回退"}},[t._v("#")]),t._v(" 3.5 版本回退")]),t._v(" "),e("p",[t._v("想要删除上一次commit的内容，可以采用reset版本回退")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git reset [--soft | --mixed | --hard] [HEAD]\n")])])]),e("p",[t._v("共有三种模式：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("模式")]),t._v(" "),e("th",[t._v("mixed")]),t._v(" "),e("th",[t._v("soft")]),t._v(" "),e("th",[t._v("hard")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("commit拆除来的文件")]),t._v(" "),e("td",[t._v("放回工作目录")]),t._v(" "),e("td",[t._v("放回暂缓区")]),t._v(" "),e("td",[t._v("直接删除")])])])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("mixed\n--mixed 为默认，可以不用带该参数，用于重置暂存区的文件与上一次的提交(commit)保持一致，工作区文件内容保持不变。这种方式会重置暂缓区的内容，即把暂缓区的文件给删除，但是不会影响工作区的内容。")])]),t._v(" "),e("li",[e("p",[t._v("soft")]),t._v(" "),e("p",[t._v("soft不会删除工作区和暂缓区，将上次的内容退回到暂缓区")])]),t._v(" "),e("li",[e("p",[t._v("hard")]),t._v(" "),e("p",[t._v("回退到之前的某个版本，并将这个版本之后的所有改动和提交都删除，这个模式"),e("strong",[t._v("谨慎使用")])])])]),t._v(" "),e("p",[t._v("回退方式有两种，一种是"),e("strong",[t._v("相对回退")]),t._v("，以当前为基准，往前回退多个个版本，还有一种是"),e("strong",[t._v("绝对回退")]),t._v("，回退到指定版本")]),t._v(" "),e("p",[e("strong",[t._v("相对回退：")])]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//退到上一个版本")]),t._v("\ngit reset  HEAD"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" \n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//退到前两个版本")]),t._v("\ngit reset  HEAD"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v("\n\nHEAD 说明：\nHEAD 表示当前版本\nHEAD"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" 上一个版本\nHEAD"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" 上上一个版本\n以此类推"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n可以使用 ～数字表示\nHEAD"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" 表示当前版本\nHEAD"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" 上一个版本\nHEAD"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" 上上一个版本\n以此类推"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])]),e("p",[e("strong",[t._v("绝对回退：")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//指定要回退的版本sha-1码\ngit reset  ffb97b5\n")])])]),e("p",[e("strong",[t._v("版本回退撤销")])]),t._v(" "),e("p",[t._v("以上所有操作都可以进行版本回退的撤销，包括hard模式")]),t._v(" "),e("p",[t._v("版本回退之后又想撤销，回到没有回退的状态")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),t._v("\n这里的id是通过git log查看到的版本id，可以写一部分即可\n")])])]),e("p",[t._v("如果忘记版本id，通过下面指令查看")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reflog\n")])])]),e("h3",{attrs:{id:"_3-6-撤销修改"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-撤销修改"}},[t._v("#")]),t._v(" 3.6 撤销修改")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git checkout -- readme.txt\n")])])]),e("p",[t._v("命令"),e("code",[t._v("git checkout -- readme.txt")]),t._v("意思就是，把"),e("code",[t._v("readme.txt")]),t._v("文件在工作区的修改全部撤销，这里有两种情况：")]),t._v(" "),e("p",[t._v("一种是"),e("code",[t._v("readme.txt")]),t._v("自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；")]),t._v(" "),e("p",[t._v("一种是"),e("code",[t._v("readme.txt")]),t._v("已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。")]),t._v(" "),e("p",[t._v("总之，就是让这个文件回到最近一次"),e("code",[t._v("git commit")]),t._v("或"),e("code",[t._v("git add")]),t._v("时的状态。")]),t._v(" "),e("p",[t._v("该命令就是回到还未add和commit的状态")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("查看文件内容")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[t._v("cat 文件名\n")])])])])]),t._v(" "),e("p",[t._v("添加到缓存去后撤销，即执行add还没执行commit")]),t._v(" "),e("div",{staticClass:"language-ja extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git reset HEAD 文件名\n")])])]),e("p",[t._v("####总结")]),t._v(" "),e("p",[t._v("场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令"),e("code",[t._v("git checkout -- file")]),t._v("。")]),t._v(" "),e("p",[t._v("场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令"),e("code",[t._v("git reset HEAD <file>")]),t._v("，就回到了场景1，第二步按场景1操作。")]),t._v(" "),e("p",[t._v("场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考"),e("a",{attrs:{href:"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013744142037508cf42e51debf49668810645e02887691000",target:"_blank",rel:"noopener noreferrer"}},[t._v("版本回退"),e("OutboundLink")],1),t._v("一节，不过前提是没有推送到远程库。")]),t._v(" "),e("h3",{attrs:{id:"_3-7-删除文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-删除文件"}},[t._v("#")]),t._v(" 3.7 删除文件")]),t._v(" "),e("p",[t._v("一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用"),e("code",[t._v("rm")]),t._v("命令删了：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ rm test.txt\n")])])]),e("p",[t._v("这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，"),e("code",[t._v("git status")]),t._v("命令会立刻告诉你哪些文件被删除了：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git status\n")])])]),e("p",[t._v("现在你有两个选择：")]),t._v(" "),e("ul",[e("li",[t._v("一是确实要从版本库中删除该文件，那就用命令"),e("code",[t._v("git rm")]),t._v("删掉，并且"),e("code",[t._v("git commit")]),t._v("：")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git rm test.txt\nrm 'test.txt'\n\n$ git commit -m \"remove test.txt\"\n[master d46f35e] remove test.txt\n 1 file changed, 1 deletion(-)\n delete mode 100644 test.txt\n")])])]),e("p",[t._v("现在，文件就从版本库中被删除了。")]),t._v(" "),e("ul",[e("li",[t._v("另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git checkout -- test.txt\n")])])]),e("p",[e("code",[t._v("git checkout")]),t._v("其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”")]),t._v(" "),e("h4",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),e("p",[t._v("命令"),e("code",[t._v("git rm")]),t._v("用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失**最近一次提交后你修改的内容")]),t._v(" "),e("h2",{attrs:{id:"_4-git常用命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-git常用命令"}},[t._v("#")]),t._v(" 4 git常用命令")]),t._v(" "),e("h3",{attrs:{id:"_4-1-工作区命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-工作区命令"}},[t._v("#")]),t._v(" 4.1 工作区命令")]),t._v(" "),e("p",[e("strong",[t._v("清理工作区中未添加到暂缓区的文件，即untracked文件")])]),t._v(" "),e("p",[t._v("git clean -n")]),t._v(" "),e("p",[t._v("是一次clean的演习, 告诉你哪些文件会被删除. 记住他不会真正的删除文件, 只是一个提醒")]),t._v(" "),e("p",[t._v("git clean -f")]),t._v(" "),e("p",[t._v("删除当前目录下所有没有track过的文件. 他不会删除.gitignore文件里面指定的文件夹和文件, 不管这些文件有没有被track过")]),t._v(" "),e("p",[t._v("git clean -f")]),t._v(" "),e("p",[t._v("删除指定路径下的没有被track过的文件")]),t._v(" "),e("p",[t._v("git clean -df")]),t._v(" "),e("p",[t._v("删除当前目录下没有被track过的文件和文件夹")]),t._v(" "),e("p",[t._v("git clean -xf")]),t._v(" "),e("p",[t._v("删除当前目录下所有没有track过的文件. 不管他是否是.gitignore文件里面指定的文件夹和文件")]),t._v(" "),e("p",[t._v("git reset --hard和git clean -f是一对好基友. 结合使用他们能让你的工作目录完全回退到最近一次commit的时候")]),t._v(" "),e("p",[t._v("git clean对于刚编译过的项目也非常有用. 如, 他能轻易删除掉编译后生成的.o和.exe等文件. 这个在打包要发布一个release的时候非常有用")]),t._v(" "),e("h3",{attrs:{id:"_4-2-git配置命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-git配置命令"}},[t._v("#")]),t._v(" 4.2 git配置命令")]),t._v(" "),e("blockquote",[e("p",[t._v("查询配置信息")])]),t._v(" "),e("ol",[e("li",[t._v("列出当前配置："),e("code",[t._v("git config --list")]),t._v(";")]),t._v(" "),e("li",[t._v("列出repository配置："),e("code",[t._v("git config --local --list")]),t._v(";")]),t._v(" "),e("li",[t._v("列出全局配置："),e("code",[t._v("git config --global --list")]),t._v(";")]),t._v(" "),e("li",[t._v("列出系统配置："),e("code",[t._v("git config --system --list")]),t._v(";")])]),t._v(" "),e("blockquote",[e("p",[t._v("第一次使用git，配置用户信息")])]),t._v(" "),e("ol",[e("li",[t._v("配置用户名："),e("code",[t._v('git config --global user.name "your name"')]),t._v(";")]),t._v(" "),e("li",[t._v("配置用户邮箱："),e("code",[t._v('git config --global user.email "youremail@github.com"')]),t._v(";")])]),t._v(" "),e("blockquote",[e("p",[t._v("其他配置")])]),t._v(" "),e("ol",[e("li",[t._v("配置解决冲突时使用哪种差异分析工具，比如要使用vimdiff："),e("code",[t._v("git config --global merge.tool vimdiff")]),t._v(";")]),t._v(" "),e("li",[t._v("配置git命令输出为彩色的："),e("code",[t._v("git config --global color.ui auto")]),t._v(";")]),t._v(" "),e("li",[t._v("配置git使用的文本编辑器："),e("code",[t._v("git config --global core.editor vi")]),t._v(";")])]),t._v(" "),e("h3",{attrs:{id:"_4-3-工作区上的操作命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-工作区上的操作命令"}},[t._v("#")]),t._v(" 4.3 工作区上的操作命令")]),t._v(" "),e("blockquote",[e("p",[t._v("新建仓库")])]),t._v(" "),e("ol",[e("li",[t._v("将工作区中的项目文件使用git进行管理，即创建一个新的本地仓库："),e("code",[t._v("git init")]),t._v("；")]),t._v(" "),e("li",[t._v("从远程git仓库复制项目："),e("code",[t._v("git clone <url>")]),t._v("，如：git clone git://github.com/wasd/example.git;克隆项目时如果想定义新的项目名，可以在clone命令后指定新的项目名："),e("code",[t._v("git clone git://github.com/wasd/example.git mygit")]),t._v("；")])]),t._v(" "),e("blockquote",[e("p",[t._v("提交")])]),t._v(" "),e("ol",[e("li",[t._v("提交工作区所有文件到暂存区："),e("code",[t._v("git add .")])]),t._v(" "),e("li",[t._v("提交工作区中指定文件到暂存区："),e("code",[t._v("git add <file1> <file2> ...")]),t._v(";")]),t._v(" "),e("li",[t._v("提交工作区中某个文件夹中所有文件到暂存区："),e("code",[t._v("git add [dir]")]),t._v(";")])]),t._v(" "),e("blockquote",[e("p",[t._v("撤销")])]),t._v(" "),e("ol",[e("li",[t._v("删除工作区文件，并且也从暂存区删除对应文件的记录："),e("code",[t._v("git rm <file1> <file2>")]),t._v(";")]),t._v(" "),e("li",[t._v("从暂存区中删除文件，但是工作区依然还有该文件:"),e("code",[t._v("git rm --cached <file>")]),t._v(";")]),t._v(" "),e("li",[t._v("取消暂存区已经暂存的文件："),e("code",[t._v("git reset HEAD <file>...")]),t._v(";")]),t._v(" "),e("li",[t._v("撤销上一次对文件的操作："),e("code",[t._v("git checkout --<file>")]),t._v("。要确定上一次对文件的修改不再需要，如果想保留上一次的修改以备以后继续工作，可以使用stashing和分支来处理；")]),t._v(" "),e("li",[t._v("隐藏当前变更，以便能够切换分支："),e("code",[t._v("git stash")]),t._v("；")]),t._v(" "),e("li",[t._v("查看当前所有的储藏："),e("code",[t._v("git stash list")]),t._v("；")]),t._v(" "),e("li",[t._v("应用最新的储藏："),e("code",[t._v("git stash apply")]),t._v("，如果想应用更早的储藏："),e("code",[t._v("git stash apply stash@{2}")]),t._v("；重新应用被暂存的变更，需要加上"),e("code",[t._v("--index")]),t._v("参数："),e("code",[t._v("git stash apply --index")]),t._v(";")]),t._v(" "),e("li",[t._v("使用apply命令只是应用储藏，而内容仍然还在栈上，需要移除指定的储藏："),e("code",[t._v("git stash drop stash{0}")]),t._v("；如果使用pop命令不仅可以重新应用储藏，还可以立刻从堆栈中清除："),e("code",[t._v("git stash pop")]),t._v(";")]),t._v(" "),e("li",[t._v("在某些情况下，你可能想应用储藏的修改，在进行了一些其他的修改后，又要取消之前所应用储藏的修改。Git没有提供类似于 stash unapply 的命令，但是可以通过取消该储藏的补丁达到同样的效果："),e("code",[t._v("git stash show -p stash@{0} | git apply -R")]),t._v("；同样的，如果你沒有指定具体的某个储藏，Git 会选择最近的储藏："),e("code",[t._v("git stash show -p | git apply -R")]),t._v("；")])]),t._v(" "),e("blockquote",[e("p",[t._v("更新文件")])]),t._v(" "),e("ol",[e("li",[t._v("重命名文件，并将已改名文件提交到暂存区："),e("code",[t._v("git mv [file-original] [file-renamed]")]),t._v(";")])]),t._v(" "),e("blockquote",[e("p",[t._v("查新信息")])]),t._v(" "),e("ol",[e("li",[t._v("查询当前工作区所有文件的状态："),e("code",[t._v("git status")]),t._v(";")]),t._v(" "),e("li",[t._v("比较工作区中当前文件和暂存区之间的差异，也就是修改之后还没有暂存的内容：git diff；指定文件在工作区和暂存区上差异比较："),e("code",[t._v("git diff <file-name>")]),t._v(";")])]),t._v(" "),e("h3",{attrs:{id:"_4-4-暂存区上的操作命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-暂存区上的操作命令"}},[t._v("#")]),t._v(" 4.4  暂存区上的操作命令")]),t._v(" "),e("blockquote",[e("p",[t._v("提交文件到版本库")])]),t._v(" "),e("ol",[e("li",[t._v("将暂存区中的文件提交到本地仓库中，即打上新版本："),e("code",[t._v('git commit -m "commit_info"')]),t._v(";")]),t._v(" "),e("li",[t._v("将所有已经使用git管理过的文件暂存后一并提交，跳过add到暂存区的过程："),e("code",[t._v('git commit -a -m "commit_info"')]),t._v(";")]),t._v(" "),e("li",[t._v("提交文件时，发现漏掉几个文件，或者注释写错了，可以撤销上一次提交："),e("code",[t._v("git commit --amend")]),t._v(";")])]),t._v(" "),e("blockquote",[e("p",[t._v("查看信息")])]),t._v(" "),e("ol",[e("li",[t._v("比较暂存区与上一版本的差异："),e("code",[t._v("git diff --cached")]),t._v(";")]),t._v(" "),e("li",[t._v("指定文件在暂存区和本地仓库的不同："),e("code",[t._v("git diff <file-name> --cached")]),t._v(";")]),t._v(" "),e("li",[t._v("查看提交历史：git log；参数"),e("code",[t._v("-p")]),t._v("展开每次提交的内容差异，用"),e("code",[t._v("-2")]),t._v("显示最近的两次更新，如"),e("code",[t._v("git log -p -2")]),t._v(";")])]),t._v(" "),e("blockquote",[e("p",[t._v("打标签")])]),t._v(" "),e("p",[t._v("Git 使用的标签有两种类型："),e("strong",[t._v("轻量级的（lightweight）和含附注的（annotated）")]),t._v("。轻量级标签就像是个不会变化的分支，实际上它就是个指向特定提交对象的引用。而含附注标签，实际上是存储在仓库中的一个独立对象，它有自身的校验和信息，包含着标签的名字，电子邮件地址和日期，以及标签说明，标签本身也允许使用 GNU Privacy Guard (GPG) 来签署或验证。一般我们都建议使用含附注型的标签，以便保留相关信息；当然，如果只是临时性加注标签，或者不需要旁注额外信息，用轻量级标签也没问题。")]),t._v(" "),e("ol",[e("li",[t._v("列出现在所有的标签："),e("code",[t._v("git tag")]),t._v(";")]),t._v(" "),e("li",[t._v("使用特定的搜索模式列出符合条件的标签，例如只对1.4.2系列的版本感兴趣："),e("code",[t._v('git tag -l "v1.4.2.*"')]),t._v(";")]),t._v(" "),e("li",[t._v("创建一个含附注类型的标签，需要加"),e("code",[t._v("-a")]),t._v("参数，如"),e("code",[t._v('git tag -a v1.4 -m "my version 1.4"')]),t._v(";")]),t._v(" "),e("li",[t._v("使用git show命令查看相应标签的版本信息，并连同显示打标签时的提交对象："),e("code",[t._v("git show v1.4")]),t._v(";")]),t._v(" "),e("li",[t._v("如果有自己的私钥，可以使用GPG来签署标签，只需要在命令中使用"),e("code",[t._v("-s")]),t._v("参数："),e("code",[t._v('git tag -s v1.5 -m "my signed 1.5 tag"')]),t._v(";")]),t._v(" "),e("li",[t._v("验证已签署的标签：git tag -v ，如"),e("code",[t._v("git tag -v v1.5")]),t._v(";")]),t._v(" "),e("li",[t._v("创建一个轻量级标签的话，就直接使用git tag命令即可，连"),e("code",[t._v("-a")]),t._v(","),e("code",[t._v("-s")]),t._v("以及"),e("code",[t._v("-m")]),t._v("选项都不需要，直接给出标签名字即可，如"),e("code",[t._v("git tag v1.5")]),t._v(";")]),t._v(" "),e("li",[t._v("将标签推送到远程仓库中：git push origin ，如"),e("code",[t._v("git push origin v1.5")]),t._v("；")]),t._v(" "),e("li",[t._v("将本地所有的标签全部推送到远程仓库中："),e("code",[t._v("git push origin --tags")]),t._v(";")])]),t._v(" "),e("blockquote",[e("p",[t._v("分支管理")])]),t._v(" "),e("ol",[e("li",[t._v("创建分支："),e("code",[t._v("git branch <branch-name>")]),t._v("，如"),e("code",[t._v("git branch testing")]),t._v("；")]),t._v(" "),e("li",[t._v("从当前所处的分支切换到其他分支："),e("code",[t._v("git checkout <branch-name>")]),t._v("，如"),e("code",[t._v("git checkout testing")]),t._v("；")]),t._v(" "),e("li",[t._v("新建并切换到新建分支上："),e("code",[t._v("git checkout -b <branch-name>")]),t._v(";")]),t._v(" "),e("li",[t._v("删除分支："),e("code",[t._v("git branch -d <branch-name>")]),t._v("；")]),t._v(" "),e("li",[t._v("将当前分支与指定分支进行合并："),e("code",[t._v("git merge <branch-name>")]),t._v(";")]),t._v(" "),e("li",[t._v("显示本地仓库的所有分支："),e("code",[t._v("git branch")]),t._v(";")]),t._v(" "),e("li",[t._v("查看各个分支最后一个提交对象的信息："),e("code",[t._v("git branch -v")]),t._v(";")]),t._v(" "),e("li",[t._v("查看哪些分支已经合并到当前分支："),e("code",[t._v("git branch --merged")]),t._v(";")]),t._v(" "),e("li",[t._v("查看当前哪些分支还没有合并到当前分支："),e("code",[t._v("git branch --no-merged")]),t._v(";")]),t._v(" "),e("li",[t._v("把远程分支合并到当前分支："),e("code",[t._v("git merge <remote-name>/<branch-name>")]),t._v("，如"),e("code",[t._v("git merge origin/serverfix")]),t._v("；如果是单线的历史分支不存在任何需要解决的分歧，只是简单的将HEAD指针前移，所以这种合并过程可以称为快进（Fast forward），而如果是历史分支是分叉的，会以当前分叉的两个分支作为两个祖先，创建新的提交对象；如果在合并分支时，遇到合并冲突需要人工解决后，再才能提交；")]),t._v(" "),e("li",[t._v("在远程分支的基础上创建新的本地分支"),e("code",[t._v("：git checkout -b <branch-name> <remote-name>/<branch-name>")]),t._v("，如"),e("code",[t._v("git checkout -b serverfix origin/serverfix")]),t._v(";")]),t._v(" "),e("li",[t._v("从远程分支checkout出来的本地分支，称之为跟踪分支。在跟踪分支上向远程分支上推送内容："),e("code",[t._v("git push")]),t._v("。该命令会自动判断应该向远程仓库中的哪个分支推送数据；在跟踪分支上合并远程分支："),e("code",[t._v("git pull")]),t._v("；")]),t._v(" "),e("li",[t._v("将一个分支里提交的改变移到基底分支上重放一遍："),e("code",[t._v("git rebase <rebase-branch> <branch-name>")]),t._v("，如"),e("code",[t._v("git rebase master server")]),t._v("，将特性分支server提交的改变在基底分支master上重演一遍；使用rebase操作最大的好处是像在单个分支上操作的，提交的修改历史也是一根线；如果想把基于一个特性分支上的另一个特性分支变基到其他分支上，可以使用"),e("code",[t._v("--onto")]),t._v("操作："),e("code",[t._v("git rebase --onto <rebase-branch> <feature branch> <sub-feature-branch>")]),t._v("，如"),e("code",[t._v("git rebase --onto master server client")]),t._v("；使用rebase操作应该遵循的原则是："),e("strong",[t._v("一旦分支中的提交对象发布到公共仓库，就千万不要对该分支进行rebase操作")]),t._v("；")])]),t._v(" "),e("h3",{attrs:{id:"_4-5-本地仓库上的操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-本地仓库上的操作"}},[t._v("#")]),t._v(" 4.5 本地仓库上的操作")]),t._v(" "),e("ol",[e("li",[t._v("查看本地仓库关联的远程仓库："),e("code",[t._v("git remote")]),t._v("；在克隆完每个远程仓库后，远程仓库默认为"),e("code",[t._v("origin")]),t._v(";加上"),e("code",[t._v("-v")]),t._v("的参数后，会显示远程仓库的"),e("code",[t._v("url")]),t._v("地址；")]),t._v(" "),e("li",[t._v("添加远程仓库，一般会取一个简短的别名："),e("code",[t._v("git remote add [remote-name] [url]")]),t._v("，比如："),e("code",[t._v("git remote add example git://github.com/example/example.git")]),t._v(";")]),t._v(" "),e("li",[t._v("从远程仓库中抓取本地仓库中没有的更新："),e("code",[t._v("git fetch [remote-name]")]),t._v("，如"),e("code",[t._v("git fetch origin")]),t._v(";使用fetch只是将远端数据拉到本地仓库，并不自动合并到当前工作分支，只能人工合并。如果设置了某个分支关联到远程仓库的某个分支的话，可以使用"),e("code",[t._v("git pull")]),t._v("来拉去远程分支的数据，然后将远端分支自动合并到本地仓库中的当前分支；")]),t._v(" "),e("li",[t._v("将本地仓库某分支推送到远程仓库上："),e("code",[t._v("git push [remote-name] [branch-name]")]),t._v("，如"),e("code",[t._v("git push origin master")]),t._v("；如果想将本地分支推送到远程仓库的不同名分支："),e("code",[t._v("git push <remote-name> <local-branch>:<remote-branch>")]),t._v("，如"),e("code",[t._v("git push origin serverfix:awesomebranch")]),t._v(";如果想删除远程分支："),e("code",[t._v("git push [romote-name] :<remote-branch>")]),t._v("，如"),e("code",[t._v("git push origin :serverfix")]),t._v("。这里省略了本地分支，也就相当于将空白内容推送给远程分支，就等于删掉了远程分支。")]),t._v(" "),e("li",[t._v("查看远程仓库的详细信息："),e("code",[t._v("git remote show origin")]),t._v("；")]),t._v(" "),e("li",[t._v("修改某个远程仓库在本地的简称："),e("code",[t._v("git remote rename [old-name] [new-name]")]),t._v("，如"),e("code",[t._v("git remote rename origin org")]),t._v("；")]),t._v(" "),e("li",[t._v("移除远程仓库："),e("code",[t._v("git remote rm [remote-name]")]),t._v("；")])]),t._v(" "),e("h2",{attrs:{id:"_5-文件忽略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-文件忽略"}},[t._v("#")]),t._v(" 5 文件忽略")]),t._v(" "),e("p",[t._v("一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。我们可以创建一个名为 .gitignore 的文件，列出要忽略的文件模式。如下例：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 忽略某个文件，直接写文件名，例如\na.html\n# 忽略所有 .a 结尾的文件\n*.a\n# 但 lib.a 除外\n!lib.a\n# 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO\n/TODO\n# 忽略 build/ 目录下的所有文件\nbuild/\n# 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt\ndoc/*.txt\n# 忽略 doc/ 目录下所有扩展名为 txt 的文件\ndoc/**/*.txt\n")])])]),e("h2",{attrs:{id:"_6-分支操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-分支操作"}},[t._v("#")]),t._v(" 6 分支操作")]),t._v(" "),e("h3",{attrs:{id:"_6-1-分支基本操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-分支基本操作"}},[t._v("#")]),t._v(" 6.1 分支基本操作")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//查看当前所有分支")]),t._v("\ngit branch\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//创建分支")]),t._v("\ngit branch 分支名\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//更改分支名称")]),t._v("\ngit branch "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("m 要改的分支名 改后的分支名\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//删除分支")]),t._v("\ngit branch "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("d 分支名\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//强行删除未完全合并的分支")]),t._v("\ngit branch "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("D")]),t._v(" 分支名\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//切换分支")]),t._v("\ngit checkout 分支名\n")])])]),e("h4",{attrs:{id:"_6-1-1-创建分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-1-创建分支"}},[t._v("#")]),t._v(" 6.1.1 创建分支")]),t._v(" "),e("ul",[e("li",[t._v("创建远程分支")]),t._v(" "),e("li",[t._v("创建本地分支\ngit branch 分支名")])]),t._v(" "),e("h4",{attrs:{id:"_6-2-1-查看分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-1-查看分支"}},[t._v("#")]),t._v(" 6.2.1 查看分支")]),t._v(" "),e("ul",[e("li",[t._v("查看远程分支\ngit branch -a\n这个命令查看所有分支，本地和远程，带有remote的就是远程分支")]),t._v(" "),e("li",[t._v("查看本地分支\ngit branch")])]),t._v(" "),e("h4",{attrs:{id:"_6-3-1-删除分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-1-删除分支"}},[t._v("#")]),t._v(" 6.3.1 删除分支")]),t._v(" "),e("ul",[e("li",[t._v("删除远程分支")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("查看所有分支：git branch -a \n结果如下：\n* master\n  remotes/origin/master\n  remotes/origin/todolist-2\n  \n  下面这两个表示远程分支\n  remotes/origin/master\n  remotes/origin/todolist-2\n  删除远程分支\n  git push origin --delete todolist-2\n  再执行git branch -a可看到删除的分支已经没有了\n  \n")])])]),e("ul",[e("li",[t._v("删除本地分支")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git branch -d <name>\n注意：如果现在正处于该分支上，就不能删除，切换到其他分支就可以了\n")])])]),e("p",[t._v("创建分支："),e("code",[t._v("git branch 分支名")])]),t._v(" "),e("p",[t._v("切换分支：`git checkout 分支名")]),t._v(" "),e("p",[t._v("创建+切换分支：`git checkout -b 分支名")]),t._v(" "),e("p",[t._v("合并某分支到当前分支：`git merge 分支名")]),t._v(" "),e("p",[t._v("git切换分支时，如果有未untracked文件，切换分支这个文件是不会随着分支切换而改变**")]),t._v(" "),e("h3",{attrs:{id:"_6-2-分支合并"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-分支合并"}},[t._v("#")]),t._v(" 6.2 分支合并")]),t._v(" "),e("p",[t._v("分支合并有两种方式，一种是merge，一种是rebase")]),t._v(" "),e("h3",{attrs:{id:"_6-3-合并冲突"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-合并冲突"}},[t._v("#")]),t._v(" 6.3 合并冲突")]),t._v(" "),e("h3",{attrs:{id:"_6-4-合并取消"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-合并取消"}},[t._v("#")]),t._v(" 6.4 合并取消")]),t._v(" "),e("p",[t._v("merge合并方式")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git reset --hard head^\n")])])]),e("p",[t._v("rebase合并方式")]),t._v(" "),e("p",[t._v("方案1：")]),t._v(" "),e("p",[t._v("通过reflog查看rebase之前的最近一次提交记录")]),t._v(" "),e("p",[t._v("通过reset回到指定版本")]),t._v(" "),e("p",[t._v("方案2：")]),t._v(" "),e("p",[t._v("使用ORIG_HEAD，这个是在git文件夹中能看到，作用是记录最近一次危险操作前的head位置。危险操作包括merge、rebase、reset")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git reset --hard ORIG_HEAD\n")])])]),e("h3",{attrs:{id:"_6-5-更改commit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-5-更改commit"}},[t._v("#")]),t._v(" 6.5 更改commit")]),t._v(" "),e("p",[t._v("更改commit有三种方式")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("指令")]),t._v(" "),e("th",[t._v("修改历史记录")]),t._v(" "),e("th",[t._v("说明")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("reset")]),t._v(" "),e("td",[t._v("是")]),t._v(" "),e("td",[t._v("把当前的状态设置为某个指定的commit状态，通常适用于尚未推出去的commit")])]),t._v(" "),e("tr",[e("td",[t._v("rebase")]),t._v(" "),e("td",[t._v("是")]),t._v(" "),e("td",[t._v("不管是新增，改动、删除commit，都很方便，但通常适用于尚未推出去的commit")])]),t._v(" "),e("tr",[e("td",[t._v("revert")]),t._v(" "),e("td",[t._v("是")]),t._v(" "),e("td",[t._v("新增一个commit来取消另一个commit的内容，原来的commit依旧会保留在历史记录中，通常适用于已经推出去的commit内容")])])])]),t._v(" "),e("h3",{attrs:{id:"_6-5-从历史commit创建分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-5-从历史commit创建分支"}},[t._v("#")]),t._v(" 6.5 从历史commit创建分支")]),t._v(" "),e("h2",{attrs:{id:"_7-远程分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-远程分支"}},[t._v("#")]),t._v(" 7 远程分支")]),t._v(" "),e("h3",{attrs:{id:"_7-1-连接远程仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-连接远程仓库"}},[t._v("#")]),t._v(" 7.1 连接远程仓库")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git remote add origin git@github.com:michaelliao/learngit.git\n")])])]),e("p",[t._v("添加后，远程库的名字就是"),e("code",[t._v("origin")]),t._v("，这是Git默认的叫法，也可以改成别的，但是"),e("code",[t._v("origin")]),t._v("这个名字一看就知道是远程库")]),t._v(" "),e("p",[t._v("查看连接的远程地址：")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[t._v("git remote "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("v\n")])])]),e("h3",{attrs:{id:"_7-2-推送文件到远程库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-推送文件到远程库"}},[t._v("#")]),t._v(" 7.2 推送文件到远程库")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push -u origin master\n")])])]),e("p",[t._v("把本地库的内容推送到远程，用"),e("code",[t._v("git push")]),t._v("命令，实际上是把当前分支"),e("code",[t._v("master")]),t._v("推送到远程。")]),t._v(" "),e("p",[t._v("由于远程库是空的，我们第一次推送"),e("code",[t._v("master")]),t._v("分支时，加上了"),e("code",[t._v("-u")]),t._v("参数，Git不但会把本地的"),e("code",[t._v("master")]),t._v("分支内容推送的远程新的"),e("code",[t._v("master")]),t._v("分支，还会把本地的"),e("code",[t._v("master")]),t._v("分支和远程的"),e("code",[t._v("master")]),t._v("分支关联起来，在以后的推送或者拉取时就可以简化命令。")]),t._v(" "),e("h3",{attrs:{id:"_7-3-克隆远程仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-克隆远程仓库"}},[t._v("#")]),t._v(" 7.3 克隆远程仓库")]),t._v(" "),e("p",[t._v("克隆github已经存在的远程仓库")]),t._v(" "),e("p",[t._v("不指定分支名")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git clone git@github.com:账户名/仓库名.git\n")])])]),e("p",[t._v("指定分支名")]),t._v(" "),e("p",[t._v("git clone -b 分支名 地址")]),t._v(" "),e("p",[t._v("git clone -b dev_jk http://10.1.1.11/service/tmall-service.git")]),t._v(" "),e("h2",{attrs:{id:"_8-git开发流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-git开发流程"}},[t._v("#")]),t._v(" 8 git开发流程")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('进入项目文件夹\ngit init //项目初始化，创建一个git仓库\ngit add 文件夹名/文件名  //添加文件到git仓库\ngit commit -m "提交的时候输入的内容" //提交文件到git仓库\ngit remote add origin git@github.com:michaelliao/learngit.git //连接远程仓库\ngit push -u origin master //推送当前分支到远程仓库\n\n更新git 分支\n1. 切换到分支（这个分支为自己从哪个分支里面创建的分支）git checkout feature/twoway-qzj \n2. git pull 拉取分支的最新内容\n3. 切换回自己的分支，在自己的分支上执行 git merge --no-ff feature/twoway，意思是将feature/twoway合并到自己的分支\n')])])])])}),[],!1,null,null,null);a.default=_.exports}}]);